/*
 * generated by Xtext
 */
package jkind.xtext.scoping;


import java.util.List;

import jkind.xtext.jkind.File;
import jkind.xtext.jkind.JkindPackage;
import jkind.xtext.jkind.RecordExpr;
import jkind.xtext.jkind.RecordType;
import jkind.xtext.jkind.Typedef;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;


/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping on how and when
 * to use it
 * 
 */
public class JKindScopeProvider extends
		org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	IScope scope_Field(RecordExpr e, @SuppressWarnings("unused") EReference reference) {
		File file = EcoreUtil2.getContainerOfType(e, File.class);
		List<INode> nodes = NodeModelUtils.findNodesForFeature(e, JkindPackage.Literals.RECORD_EXPR__DEF);
		String name = nodes.get(0).getText();
		
		for (Typedef typedef : file.getTypedefs()) {
			if (typedef.getName().equals(name) && typedef.getType() instanceof RecordType) {
				RecordType record = (RecordType) typedef.getType();
				return Scopes.scopeFor(record.getFields());
			}
		}
		return IScope.NULLSCOPE;
	}
}
