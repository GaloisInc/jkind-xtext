grammar jkind.xtext.JKind hidden(WS, SL_COMMENT, ML_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate jkind "https://github.com/agacek/jkind-xtext"

File:
	(typedefs+=Typedef | constants+=Constant | nodes+=Node)*
;

Typedef:
	{AbbreviationType} 'type' name=ID '=' type=Type ';'
|	{RecordType} 'type' name=ID '=' 'struct'
	             '{' fields+=Field ':' types+=Type
	            (';' fields+=Field ':' types+=Type)* '}' ';'
;

Type:
	{IntType} 'int'
|   {BoolType} 'bool' 
|   {RealType} 'real'
|	{SubrangeType} 'subrange' '[' low=Bound ',' high=Bound ']' 'of' 'int'
|   {UserType} def=[Typedef]
;

Field:
	name=ID
;

Bound returns ecore::EBigInteger:
	'-'? INT
;

Constant:
	'const' name=ID (':' type=Type)? '=' expr=Expr ';'
;

Node:
	'node' name=ID '(' (inputs+=VariableGroup (';' inputs+=VariableGroup)*)? ')'
	'returns' '(' (outputs+=VariableGroup (';' outputs+=VariableGroup)*)? ')' ';'
	('var' (locals+=VariableGroup ';')*)?
	'let'
		(equations+=Equation | assertions+=Assertion | properties+=Property | main+=Main)*
	'tel' ';'?
;

VariableGroup:
	variables+=Variable (',' variables+=Variable)* ':' type=Type
;

Variable:
	name=ID
;

Equation:
	=>(lhs+=[Variable] (',' lhs+=[Variable])* '=') rhs=Expr ';'
|	rhs=Expr ';'
;

Property:
	'--%PROPERTY' ref=[Variable] ';'
;

Main:
	'--%MAIN' ';'?
;

Assertion:
	'assert' expr=Expr ';'
;

Expr:
	ArrowExpr;

ArrowExpr returns Expr:
	ImpliesExpr (=>({BinaryExpr.left=current} op='->') right=ArrowExpr)?
;

ImpliesExpr returns Expr:
	OrExpr (=>({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?
;

OrExpr returns Expr:
	AndExpr (=>({BinaryExpr.left=current} op=('or' | 'xor')) right=AndExpr)*
;

AndExpr returns Expr:
	RelationalExpr (=>({BinaryExpr.left=current} op='and') right=RelationalExpr)*
;

RelationalExpr returns Expr:
	PlusExpr (=>({BinaryExpr.left=current} op=('<' | '<=' | '>' | '>=' | '=' | '<>')) right=PlusExpr)?
;

PlusExpr returns Expr:
	TimesExpr (=>({BinaryExpr.left=current} op=('+' | '-')) right=TimesExpr)*
;

TimesExpr returns Expr:
	PrefixExpr (=>({BinaryExpr.left=current} op=('*' | '/' | 'div')) right=PrefixExpr)*
;

PrefixExpr returns Expr:
	{UnaryExpr} op=('-' | 'not' | 'pre') expr=PrefixExpr
|	ProjectionExpr
;

ProjectionExpr returns Expr:
	AtomicExpr (=>({ProjectionExpr.expr=current} '.') field=[Field])*
;

AtomicExpr returns Expr:
	{IdExpr} id=[IdRef]
|	{IntExpr} val=INT
| 	{RealExpr} val=REAL
| 	{BoolExpr} val=BOOL
| 	{IfThenElseExpr} 'if' cond=Expr 'then' then=Expr 'else' else=Expr
|	NodeCallExpr
|   {CondactExpr} 'condact' '(' clock=Expr ',' call=NodeCallExpr (',' args+=Expr)* ')'
|	{RecordExpr} type=[RecordType] '{' fields+=[Field] '=' exprs+=Expr 
	                              (';' fields+=[Field] '=' exprs+=Expr)*'}'
|	 '(' Expr ')'
;

NodeCallExpr:
	node=[Node] '(' (args+=Expr (',' args+=Expr)*)? ')'
;

IdRef:
	Constant | Variable
;

REAL:
	INT '.' INT
;

BOOL:
	'true' | 'false'
;
	
terminal ID:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*
;

terminal INT returns ecore::EBigInteger:
	('0'..'9')+
;

terminal WS:
	(' '|'\t'|'\r'|'\n')+
;

terminal SL_COMMENT:
	'--' (!('%' | '\r' | '\n') !('\r' | '\n')*)? ('\r'? '\n')?
;

terminal ML_COMMENT:
	'/*' -> '*/'
;

terminal ANY_OTHER: .;