/*
* generated by Xtext
*/
package jkind.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class JKindGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "File");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypedefsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypedefsTypeDefParserRuleCall_0_0 = (RuleCall)cTypedefsAssignment_0.eContents().get(0);
		private final Assignment cConstantsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstantsConstantParserRuleCall_1_0 = (RuleCall)cConstantsAssignment_1.eContents().get(0);
		private final Assignment cNodesAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNodesNodeParserRuleCall_2_0 = (RuleCall)cNodesAssignment_2.eContents().get(0);
		
		//File:
		//	(typedefs+=TypeDef | constants+=Constant | nodes+=Node)*;
		public ParserRule getRule() { return rule; }

		//(typedefs+=TypeDef | constants+=Constant | nodes+=Node)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//typedefs+=TypeDef
		public Assignment getTypedefsAssignment_0() { return cTypedefsAssignment_0; }

		//TypeDef
		public RuleCall getTypedefsTypeDefParserRuleCall_0_0() { return cTypedefsTypeDefParserRuleCall_0_0; }

		//constants+=Constant
		public Assignment getConstantsAssignment_1() { return cConstantsAssignment_1; }

		//Constant
		public RuleCall getConstantsConstantParserRuleCall_1_0() { return cConstantsConstantParserRuleCall_1_0; }

		//nodes+=Node
		public Assignment getNodesAssignment_2() { return cNodesAssignment_2; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_2_0() { return cNodesNodeParserRuleCall_2_0; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAbbreviationTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTypeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cTypeAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_0_4_0 = (RuleCall)cTypeAssignment_0_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRecordTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTypeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cStructKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cFieldsAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cFieldsFieldParserRuleCall_1_6_0 = (RuleCall)cFieldsAssignment_1_6.eContents().get(0);
		private final Keyword cColonKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cTypesAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cTypesTypeParserRuleCall_1_8_0 = (RuleCall)cTypesAssignment_1_8.eContents().get(0);
		private final Group cGroup_1_9 = (Group)cGroup_1.eContents().get(9);
		private final Keyword cSemicolonKeyword_1_9_0 = (Keyword)cGroup_1_9.eContents().get(0);
		private final Assignment cFieldsAssignment_1_9_1 = (Assignment)cGroup_1_9.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_1_9_1_0 = (RuleCall)cFieldsAssignment_1_9_1.eContents().get(0);
		private final Keyword cColonKeyword_1_9_2 = (Keyword)cGroup_1_9.eContents().get(2);
		private final Assignment cTypesAssignment_1_9_3 = (Assignment)cGroup_1_9.eContents().get(3);
		private final RuleCall cTypesTypeParserRuleCall_1_9_3_0 = (RuleCall)cTypesAssignment_1_9_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_10 = (Keyword)cGroup_1.eContents().get(10);
		private final Keyword cSemicolonKeyword_1_11 = (Keyword)cGroup_1.eContents().get(11);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cEnumTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cTypeKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cEnumKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cValuesAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cValuesEnumValueParserRuleCall_2_6_0 = (RuleCall)cValuesAssignment_2_6.eContents().get(0);
		private final Group cGroup_2_7 = (Group)cGroup_2.eContents().get(7);
		private final Keyword cCommaKeyword_2_7_0 = (Keyword)cGroup_2_7.eContents().get(0);
		private final Assignment cValuesAssignment_2_7_1 = (Assignment)cGroup_2_7.eContents().get(1);
		private final RuleCall cValuesEnumValueParserRuleCall_2_7_1_0 = (RuleCall)cValuesAssignment_2_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		private final Keyword cSemicolonKeyword_2_9 = (Keyword)cGroup_2.eContents().get(9);
		
		//TypeDef:
		//	{AbbreviationType} "type" name=ID "=" type=Type ";" | {RecordType} "type" name=ID "=" "struct" "{" fields+=Field ":"
		//	types+=Type (";" fields+=Field ":" types+=Type)* "}" ";" | {EnumType} "type" name=ID "=" "enum" "{" values+=EnumValue
		//	("," values+=EnumValue)* "}" ";";
		public ParserRule getRule() { return rule; }

		//{AbbreviationType} "type" name=ID "=" type=Type ";" | {RecordType} "type" name=ID "=" "struct" "{" fields+=Field ":"
		//types+=Type (";" fields+=Field ":" types+=Type)* "}" ";" | {EnumType} "type" name=ID "=" "enum" "{" values+=EnumValue
		//("," values+=EnumValue)* "}" ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AbbreviationType} "type" name=ID "=" type=Type ";"
		public Group getGroup_0() { return cGroup_0; }

		//{AbbreviationType}
		public Action getAbbreviationTypeAction_0_0() { return cAbbreviationTypeAction_0_0; }

		//"type"
		public Keyword getTypeKeyword_0_1() { return cTypeKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_3() { return cEqualsSignKeyword_0_3; }

		//type=Type
		public Assignment getTypeAssignment_0_4() { return cTypeAssignment_0_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_4_0() { return cTypeTypeParserRuleCall_0_4_0; }

		//";"
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }

		//{RecordType} "type" name=ID "=" "struct" "{" fields+=Field ":" types+=Type (";" fields+=Field ":" types+=Type)* "}" ";"
		public Group getGroup_1() { return cGroup_1; }

		//{RecordType}
		public Action getRecordTypeAction_1_0() { return cRecordTypeAction_1_0; }

		//"type"
		public Keyword getTypeKeyword_1_1() { return cTypeKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_3() { return cEqualsSignKeyword_1_3; }

		//"struct"
		public Keyword getStructKeyword_1_4() { return cStructKeyword_1_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_5() { return cLeftCurlyBracketKeyword_1_5; }

		//fields+=Field
		public Assignment getFieldsAssignment_1_6() { return cFieldsAssignment_1_6; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_1_6_0() { return cFieldsFieldParserRuleCall_1_6_0; }

		//":"
		public Keyword getColonKeyword_1_7() { return cColonKeyword_1_7; }

		//types+=Type
		public Assignment getTypesAssignment_1_8() { return cTypesAssignment_1_8; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_1_8_0() { return cTypesTypeParserRuleCall_1_8_0; }

		//(";" fields+=Field ":" types+=Type)*
		public Group getGroup_1_9() { return cGroup_1_9; }

		//";"
		public Keyword getSemicolonKeyword_1_9_0() { return cSemicolonKeyword_1_9_0; }

		//fields+=Field
		public Assignment getFieldsAssignment_1_9_1() { return cFieldsAssignment_1_9_1; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_1_9_1_0() { return cFieldsFieldParserRuleCall_1_9_1_0; }

		//":"
		public Keyword getColonKeyword_1_9_2() { return cColonKeyword_1_9_2; }

		//types+=Type
		public Assignment getTypesAssignment_1_9_3() { return cTypesAssignment_1_9_3; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_1_9_3_0() { return cTypesTypeParserRuleCall_1_9_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_10() { return cRightCurlyBracketKeyword_1_10; }

		//";"
		public Keyword getSemicolonKeyword_1_11() { return cSemicolonKeyword_1_11; }

		//{EnumType} "type" name=ID "=" "enum" "{" values+=EnumValue ("," values+=EnumValue)* "}" ";"
		public Group getGroup_2() { return cGroup_2; }

		//{EnumType}
		public Action getEnumTypeAction_2_0() { return cEnumTypeAction_2_0; }

		//"type"
		public Keyword getTypeKeyword_2_1() { return cTypeKeyword_2_1; }

		//name=ID
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_2_0() { return cNameIDTerminalRuleCall_2_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_3() { return cEqualsSignKeyword_2_3; }

		//"enum"
		public Keyword getEnumKeyword_2_4() { return cEnumKeyword_2_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_5() { return cLeftCurlyBracketKeyword_2_5; }

		//values+=EnumValue
		public Assignment getValuesAssignment_2_6() { return cValuesAssignment_2_6; }

		//EnumValue
		public RuleCall getValuesEnumValueParserRuleCall_2_6_0() { return cValuesEnumValueParserRuleCall_2_6_0; }

		//("," values+=EnumValue)*
		public Group getGroup_2_7() { return cGroup_2_7; }

		//","
		public Keyword getCommaKeyword_2_7_0() { return cCommaKeyword_2_7_0; }

		//values+=EnumValue
		public Assignment getValuesAssignment_2_7_1() { return cValuesAssignment_2_7_1; }

		//EnumValue
		public RuleCall getValuesEnumValueParserRuleCall_2_7_1_0() { return cValuesEnumValueParserRuleCall_2_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_8() { return cRightCurlyBracketKeyword_2_8; }

		//";"
		public Keyword getSemicolonKeyword_2_9() { return cSemicolonKeyword_2_9; }
	}

	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnumValue:
		//	{EnumValue} name=ID;
		public ParserRule getRule() { return rule; }

		//{EnumValue} name=ID
		public Group getGroup() { return cGroup; }

		//{EnumValue}
		public Action getEnumValueAction_0() { return cEnumValueAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final RuleCall cArrayTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Type:
		//	ArrayType;
		public ParserRule getRule() { return rule; }

		//ArrayType
		public RuleCall getArrayTypeParserRuleCall() { return cArrayTypeParserRuleCall; }
	}

	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArrayTypeBaseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSizeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSizeINTTerminalRuleCall_1_2_0 = (RuleCall)cSizeAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ArrayType returns Type:
		//	AtomicType ({ArrayType.base=current} "[" size=INT "]")*;
		public ParserRule getRule() { return rule; }

		//AtomicType ({ArrayType.base=current} "[" size=INT "]")*
		public Group getGroup() { return cGroup; }

		//AtomicType
		public RuleCall getAtomicTypeParserRuleCall_0() { return cAtomicTypeParserRuleCall_0; }

		//({ArrayType.base=current} "[" size=INT "]")*
		public Group getGroup_1() { return cGroup_1; }

		//{ArrayType.base=current}
		public Action getArrayTypeBaseAction_1_0() { return cArrayTypeBaseAction_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//size=INT
		public Assignment getSizeAssignment_1_2() { return cSizeAssignment_1_2; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_1_2_0() { return cSizeINTTerminalRuleCall_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class AtomicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIntKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBoolKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRealTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cRealKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSubrangeTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSubrangeKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cLowAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cLowBoundParserRuleCall_3_3_0 = (RuleCall)cLowAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cHighAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cHighBoundParserRuleCall_3_5_0 = (RuleCall)cHighAssignment_3_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Keyword cOfKeyword_3_7 = (Keyword)cGroup_3.eContents().get(7);
		private final Keyword cIntKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cUserTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cDefAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cDefTypeDefCrossReference_4_1_0 = (CrossReference)cDefAssignment_4_1.eContents().get(0);
		private final RuleCall cDefTypeDefIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDefTypeDefCrossReference_4_1_0.eContents().get(1);
		
		//AtomicType returns Type:
		//	{IntType} "int" | {BoolType} "bool" | {RealType} "real" | {SubrangeType} "subrange" "[" low=Bound "," high=Bound "]"
		//	"of" "int" | {UserType} def=[TypeDef];
		public ParserRule getRule() { return rule; }

		//{IntType} "int" | {BoolType} "bool" | {RealType} "real" | {SubrangeType} "subrange" "[" low=Bound "," high=Bound "]"
		//"of" "int" | {UserType} def=[TypeDef]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntType} "int"
		public Group getGroup_0() { return cGroup_0; }

		//{IntType}
		public Action getIntTypeAction_0_0() { return cIntTypeAction_0_0; }

		//"int"
		public Keyword getIntKeyword_0_1() { return cIntKeyword_0_1; }

		//{BoolType} "bool"
		public Group getGroup_1() { return cGroup_1; }

		//{BoolType}
		public Action getBoolTypeAction_1_0() { return cBoolTypeAction_1_0; }

		//"bool"
		public Keyword getBoolKeyword_1_1() { return cBoolKeyword_1_1; }

		//{RealType} "real"
		public Group getGroup_2() { return cGroup_2; }

		//{RealType}
		public Action getRealTypeAction_2_0() { return cRealTypeAction_2_0; }

		//"real"
		public Keyword getRealKeyword_2_1() { return cRealKeyword_2_1; }

		//{SubrangeType} "subrange" "[" low=Bound "," high=Bound "]" "of" "int"
		public Group getGroup_3() { return cGroup_3; }

		//{SubrangeType}
		public Action getSubrangeTypeAction_3_0() { return cSubrangeTypeAction_3_0; }

		//"subrange"
		public Keyword getSubrangeKeyword_3_1() { return cSubrangeKeyword_3_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_2() { return cLeftSquareBracketKeyword_3_2; }

		//low=Bound
		public Assignment getLowAssignment_3_3() { return cLowAssignment_3_3; }

		//Bound
		public RuleCall getLowBoundParserRuleCall_3_3_0() { return cLowBoundParserRuleCall_3_3_0; }

		//","
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }

		//high=Bound
		public Assignment getHighAssignment_3_5() { return cHighAssignment_3_5; }

		//Bound
		public RuleCall getHighBoundParserRuleCall_3_5_0() { return cHighBoundParserRuleCall_3_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_6() { return cRightSquareBracketKeyword_3_6; }

		//"of"
		public Keyword getOfKeyword_3_7() { return cOfKeyword_3_7; }

		//"int"
		public Keyword getIntKeyword_3_8() { return cIntKeyword_3_8; }

		//{UserType} def=[TypeDef]
		public Group getGroup_4() { return cGroup_4; }

		//{UserType}
		public Action getUserTypeAction_4_0() { return cUserTypeAction_4_0; }

		//def=[TypeDef]
		public Assignment getDefAssignment_4_1() { return cDefAssignment_4_1; }

		//[TypeDef]
		public CrossReference getDefTypeDefCrossReference_4_1_0() { return cDefTypeDefCrossReference_4_1_0; }

		//ID
		public RuleCall getDefTypeDefIDTerminalRuleCall_4_1_0_1() { return cDefTypeDefIDTerminalRuleCall_4_1_0_1; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Field:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class BoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Bound returns ecore::EBigInteger:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Constant:
		//	"const" name=ID (":" type=Type)? "=" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//"const" name=ID (":" type=Type)? "=" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":" type=Type)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expr=Expr
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_4_0() { return cExprExprParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInputsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInputsVariableGroupParserRuleCall_3_0_0 = (RuleCall)cInputsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInputsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInputsVariableGroupParserRuleCall_3_1_1_0 = (RuleCall)cInputsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cReturnsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cOutputsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cOutputsVariableGroupParserRuleCall_7_0_0 = (RuleCall)cOutputsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cSemicolonKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cOutputsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cOutputsVariableGroupParserRuleCall_7_1_1_0 = (RuleCall)cOutputsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cVarKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Assignment cLocalsAssignment_10_1_0 = (Assignment)cGroup_10_1.eContents().get(0);
		private final RuleCall cLocalsVariableGroupParserRuleCall_10_1_0_0 = (RuleCall)cLocalsAssignment_10_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_1_1 = (Keyword)cGroup_10_1.eContents().get(1);
		private final Keyword cLetKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Alternatives cAlternatives_12 = (Alternatives)cGroup.eContents().get(12);
		private final Assignment cEquationsAssignment_12_0 = (Assignment)cAlternatives_12.eContents().get(0);
		private final RuleCall cEquationsEquationParserRuleCall_12_0_0 = (RuleCall)cEquationsAssignment_12_0.eContents().get(0);
		private final Assignment cAssertionsAssignment_12_1 = (Assignment)cAlternatives_12.eContents().get(1);
		private final RuleCall cAssertionsAssertionParserRuleCall_12_1_0 = (RuleCall)cAssertionsAssignment_12_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_12_2 = (Assignment)cAlternatives_12.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_12_2_0 = (RuleCall)cPropertiesAssignment_12_2.eContents().get(0);
		private final Assignment cMainAssignment_12_3 = (Assignment)cAlternatives_12.eContents().get(3);
		private final RuleCall cMainMainParserRuleCall_12_3_0 = (RuleCall)cMainAssignment_12_3.eContents().get(0);
		private final Assignment cSupportAssignment_12_4 = (Assignment)cAlternatives_12.eContents().get(4);
		private final RuleCall cSupportSupportParserRuleCall_12_4_0 = (RuleCall)cSupportAssignment_12_4.eContents().get(0);
		private final Assignment cRealizabilityInputsAssignment_12_5 = (Assignment)cAlternatives_12.eContents().get(5);
		private final RuleCall cRealizabilityInputsRealizabilityInputsParserRuleCall_12_5_0 = (RuleCall)cRealizabilityInputsAssignment_12_5.eContents().get(0);
		private final Keyword cTelKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Node:
		//	"node" name=ID "(" (inputs+=VariableGroup (";" inputs+=VariableGroup)*)? ")" "returns" "(" (outputs+=VariableGroup
		//	(";" outputs+=VariableGroup)*)? ")" ";" ("var" (locals+=VariableGroup ";")*)? "let" (equations+=Equation |
		//	assertions+=Assertion | properties+=Property | main+=Main | support+=Support |
		//	realizabilityInputs+=RealizabilityInputs)* "tel" ";"?;
		public ParserRule getRule() { return rule; }

		//"node" name=ID "(" (inputs+=VariableGroup (";" inputs+=VariableGroup)*)? ")" "returns" "(" (outputs+=VariableGroup (";"
		//outputs+=VariableGroup)*)? ")" ";" ("var" (locals+=VariableGroup ";")*)? "let" (equations+=Equation |
		//assertions+=Assertion | properties+=Property | main+=Main | support+=Support |
		//realizabilityInputs+=RealizabilityInputs)* "tel" ";"?
		public Group getGroup() { return cGroup; }

		//"node"
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(inputs+=VariableGroup (";" inputs+=VariableGroup)*)?
		public Group getGroup_3() { return cGroup_3; }

		//inputs+=VariableGroup
		public Assignment getInputsAssignment_3_0() { return cInputsAssignment_3_0; }

		//VariableGroup
		public RuleCall getInputsVariableGroupParserRuleCall_3_0_0() { return cInputsVariableGroupParserRuleCall_3_0_0; }

		//(";" inputs+=VariableGroup)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//";"
		public Keyword getSemicolonKeyword_3_1_0() { return cSemicolonKeyword_3_1_0; }

		//inputs+=VariableGroup
		public Assignment getInputsAssignment_3_1_1() { return cInputsAssignment_3_1_1; }

		//VariableGroup
		public RuleCall getInputsVariableGroupParserRuleCall_3_1_1_0() { return cInputsVariableGroupParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"returns"
		public Keyword getReturnsKeyword_5() { return cReturnsKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(outputs+=VariableGroup (";" outputs+=VariableGroup)*)?
		public Group getGroup_7() { return cGroup_7; }

		//outputs+=VariableGroup
		public Assignment getOutputsAssignment_7_0() { return cOutputsAssignment_7_0; }

		//VariableGroup
		public RuleCall getOutputsVariableGroupParserRuleCall_7_0_0() { return cOutputsVariableGroupParserRuleCall_7_0_0; }

		//(";" outputs+=VariableGroup)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//";"
		public Keyword getSemicolonKeyword_7_1_0() { return cSemicolonKeyword_7_1_0; }

		//outputs+=VariableGroup
		public Assignment getOutputsAssignment_7_1_1() { return cOutputsAssignment_7_1_1; }

		//VariableGroup
		public RuleCall getOutputsVariableGroupParserRuleCall_7_1_1_0() { return cOutputsVariableGroupParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }

		//("var" (locals+=VariableGroup ";")*)?
		public Group getGroup_10() { return cGroup_10; }

		//"var"
		public Keyword getVarKeyword_10_0() { return cVarKeyword_10_0; }

		//(locals+=VariableGroup ";")*
		public Group getGroup_10_1() { return cGroup_10_1; }

		//locals+=VariableGroup
		public Assignment getLocalsAssignment_10_1_0() { return cLocalsAssignment_10_1_0; }

		//VariableGroup
		public RuleCall getLocalsVariableGroupParserRuleCall_10_1_0_0() { return cLocalsVariableGroupParserRuleCall_10_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_10_1_1() { return cSemicolonKeyword_10_1_1; }

		//"let"
		public Keyword getLetKeyword_11() { return cLetKeyword_11; }

		//(equations+=Equation | assertions+=Assertion | properties+=Property | main+=Main | support+=Support |
		//realizabilityInputs+=RealizabilityInputs)*
		public Alternatives getAlternatives_12() { return cAlternatives_12; }

		//equations+=Equation
		public Assignment getEquationsAssignment_12_0() { return cEquationsAssignment_12_0; }

		//Equation
		public RuleCall getEquationsEquationParserRuleCall_12_0_0() { return cEquationsEquationParserRuleCall_12_0_0; }

		//assertions+=Assertion
		public Assignment getAssertionsAssignment_12_1() { return cAssertionsAssignment_12_1; }

		//Assertion
		public RuleCall getAssertionsAssertionParserRuleCall_12_1_0() { return cAssertionsAssertionParserRuleCall_12_1_0; }

		//properties+=Property
		public Assignment getPropertiesAssignment_12_2() { return cPropertiesAssignment_12_2; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_12_2_0() { return cPropertiesPropertyParserRuleCall_12_2_0; }

		//main+=Main
		public Assignment getMainAssignment_12_3() { return cMainAssignment_12_3; }

		//Main
		public RuleCall getMainMainParserRuleCall_12_3_0() { return cMainMainParserRuleCall_12_3_0; }

		//support+=Support
		public Assignment getSupportAssignment_12_4() { return cSupportAssignment_12_4; }

		//Support
		public RuleCall getSupportSupportParserRuleCall_12_4_0() { return cSupportSupportParserRuleCall_12_4_0; }

		//realizabilityInputs+=RealizabilityInputs
		public Assignment getRealizabilityInputsAssignment_12_5() { return cRealizabilityInputsAssignment_12_5; }

		//RealizabilityInputs
		public RuleCall getRealizabilityInputsRealizabilityInputsParserRuleCall_12_5_0() { return cRealizabilityInputsRealizabilityInputsParserRuleCall_12_5_0; }

		//"tel"
		public Keyword getTelKeyword_13() { return cTelKeyword_13; }

		//";"?
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
	}

	public class VariableGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablesVariableParserRuleCall_0_0 = (RuleCall)cVariablesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_1_1_0 = (RuleCall)cVariablesAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VariableGroup:
		//	variables+=Variable ("," variables+=Variable)* ":" type=Type;
		public ParserRule getRule() { return rule; }

		//variables+=Variable ("," variables+=Variable)* ":" type=Type
		public Group getGroup() { return cGroup; }

		//variables+=Variable
		public Assignment getVariablesAssignment_0() { return cVariablesAssignment_0; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_0_0() { return cVariablesVariableParserRuleCall_0_0; }

		//("," variables+=Variable)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//variables+=Variable
		public Assignment getVariablesAssignment_1_1() { return cVariablesAssignment_1_1; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_1_1_0() { return cVariablesVariableParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLhsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cLhsVariableCrossReference_0_0_0 = (CrossReference)cLhsAssignment_0_0.eContents().get(0);
		private final RuleCall cLhsVariableIDTerminalRuleCall_0_0_0_1 = (RuleCall)cLhsVariableCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cLhsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cLhsVariableCrossReference_0_1_1_0 = (CrossReference)cLhsAssignment_0_1_1.eContents().get(0);
		private final RuleCall cLhsVariableIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cLhsVariableCrossReference_0_1_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cRhsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRhsExprParserRuleCall_0_3_0 = (RuleCall)cRhsAssignment_0_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cLhsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final CrossReference cLhsVariableCrossReference_1_1_0_0 = (CrossReference)cLhsAssignment_1_1_0.eContents().get(0);
		private final RuleCall cLhsVariableIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cLhsVariableCrossReference_1_1_0_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cLhsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final CrossReference cLhsVariableCrossReference_1_1_1_1_0 = (CrossReference)cLhsAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cLhsVariableIDTerminalRuleCall_1_1_1_1_0_1 = (RuleCall)cLhsVariableCrossReference_1_1_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRhsAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRhsExprParserRuleCall_1_4_0 = (RuleCall)cRhsAssignment_1_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Equation:
		//	lhs+=[Variable] ("," lhs+=[Variable])* "=" rhs=Expr ";" | "(" (lhs+=[Variable] ("," lhs+=[Variable])*)? ")" "="
		//	rhs=Expr ";";
		public ParserRule getRule() { return rule; }

		//lhs+=[Variable] ("," lhs+=[Variable])* "=" rhs=Expr ";" | "(" (lhs+=[Variable] ("," lhs+=[Variable])*)? ")" "=" rhs=Expr
		//";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//lhs+=[Variable] ("," lhs+=[Variable])* "=" rhs=Expr ";"
		public Group getGroup_0() { return cGroup_0; }

		//lhs+=[Variable]
		public Assignment getLhsAssignment_0_0() { return cLhsAssignment_0_0; }

		//[Variable]
		public CrossReference getLhsVariableCrossReference_0_0_0() { return cLhsVariableCrossReference_0_0_0; }

		//ID
		public RuleCall getLhsVariableIDTerminalRuleCall_0_0_0_1() { return cLhsVariableIDTerminalRuleCall_0_0_0_1; }

		//("," lhs+=[Variable])*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//lhs+=[Variable]
		public Assignment getLhsAssignment_0_1_1() { return cLhsAssignment_0_1_1; }

		//[Variable]
		public CrossReference getLhsVariableCrossReference_0_1_1_0() { return cLhsVariableCrossReference_0_1_1_0; }

		//ID
		public RuleCall getLhsVariableIDTerminalRuleCall_0_1_1_0_1() { return cLhsVariableIDTerminalRuleCall_0_1_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//rhs=Expr
		public Assignment getRhsAssignment_0_3() { return cRhsAssignment_0_3; }

		//Expr
		public RuleCall getRhsExprParserRuleCall_0_3_0() { return cRhsExprParserRuleCall_0_3_0; }

		//";"
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }

		//"(" (lhs+=[Variable] ("," lhs+=[Variable])*)? ")" "=" rhs=Expr ";"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//(lhs+=[Variable] ("," lhs+=[Variable])*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//lhs+=[Variable]
		public Assignment getLhsAssignment_1_1_0() { return cLhsAssignment_1_1_0; }

		//[Variable]
		public CrossReference getLhsVariableCrossReference_1_1_0_0() { return cLhsVariableCrossReference_1_1_0_0; }

		//ID
		public RuleCall getLhsVariableIDTerminalRuleCall_1_1_0_0_1() { return cLhsVariableIDTerminalRuleCall_1_1_0_0_1; }

		//("," lhs+=[Variable])*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//lhs+=[Variable]
		public Assignment getLhsAssignment_1_1_1_1() { return cLhsAssignment_1_1_1_1; }

		//[Variable]
		public CrossReference getLhsVariableCrossReference_1_1_1_1_0() { return cLhsVariableCrossReference_1_1_1_1_0; }

		//ID
		public RuleCall getLhsVariableIDTerminalRuleCall_1_1_1_1_0_1() { return cLhsVariableIDTerminalRuleCall_1_1_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_1_3() { return cEqualsSignKeyword_1_3; }

		//rhs=Expr
		public Assignment getRhsAssignment_1_4() { return cRhsAssignment_1_4; }

		//Expr
		public RuleCall getRhsExprParserRuleCall_1_4_0() { return cRhsExprParserRuleCall_1_4_0; }

		//";"
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROPERTYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefVariableCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cRefVariableCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Property:
		//	"--%PROPERTY" ref=[Variable] ";";
		public ParserRule getRule() { return rule; }

		//"--%PROPERTY" ref=[Variable] ";"
		public Group getGroup() { return cGroup; }

		//"--%PROPERTY"
		public Keyword getPROPERTYKeyword_0() { return cPROPERTYKeyword_0; }

		//ref=[Variable]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[Variable]
		public CrossReference getRefVariableCrossReference_1_0() { return cRefVariableCrossReference_1_0; }

		//ID
		public RuleCall getRefVariableIDTerminalRuleCall_1_0_1() { return cRefVariableIDTerminalRuleCall_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class SupportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Support");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSupportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSUPPORTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIdsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cIdsVariableCrossReference_2_0_0 = (CrossReference)cIdsAssignment_2_0.eContents().get(0);
		private final RuleCall cIdsVariableIDTerminalRuleCall_2_0_0_1 = (RuleCall)cIdsVariableCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cIdsVariableCrossReference_2_1_1_0 = (CrossReference)cIdsAssignment_2_1_1.eContents().get(0);
		private final RuleCall cIdsVariableIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cIdsVariableCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Support:
		//	{Support} "--%SUPPORT" (ids+=[Variable] ("," ids+=[Variable])*)? ";";
		public ParserRule getRule() { return rule; }

		//{Support} "--%SUPPORT" (ids+=[Variable] ("," ids+=[Variable])*)? ";"
		public Group getGroup() { return cGroup; }

		//{Support}
		public Action getSupportAction_0() { return cSupportAction_0; }

		//"--%SUPPORT"
		public Keyword getSUPPORTKeyword_1() { return cSUPPORTKeyword_1; }

		//(ids+=[Variable] ("," ids+=[Variable])*)?
		public Group getGroup_2() { return cGroup_2; }

		//ids+=[Variable]
		public Assignment getIdsAssignment_2_0() { return cIdsAssignment_2_0; }

		//[Variable]
		public CrossReference getIdsVariableCrossReference_2_0_0() { return cIdsVariableCrossReference_2_0_0; }

		//ID
		public RuleCall getIdsVariableIDTerminalRuleCall_2_0_0_1() { return cIdsVariableIDTerminalRuleCall_2_0_0_1; }

		//("," ids+=[Variable])*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//ids+=[Variable]
		public Assignment getIdsAssignment_2_1_1() { return cIdsAssignment_2_1_1; }

		//[Variable]
		public CrossReference getIdsVariableCrossReference_2_1_1_0() { return cIdsVariableCrossReference_2_1_1_0; }

		//ID
		public RuleCall getIdsVariableIDTerminalRuleCall_2_1_1_0_1() { return cIdsVariableIDTerminalRuleCall_2_1_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMAINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Main:
		//	"--%MAIN" ";"?;
		public ParserRule getRule() { return rule; }

		//"--%MAIN" ";"?
		public Group getGroup() { return cGroup; }

		//"--%MAIN"
		public Keyword getMAINKeyword_0() { return cMAINKeyword_0; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class RealizabilityInputsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealizabilityInputs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealizabilityInputsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cREALIZABLEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIdsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cIdsVariableCrossReference_2_0_0 = (CrossReference)cIdsAssignment_2_0.eContents().get(0);
		private final RuleCall cIdsVariableIDTerminalRuleCall_2_0_0_1 = (RuleCall)cIdsVariableCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cIdsVariableCrossReference_2_1_1_0 = (CrossReference)cIdsAssignment_2_1_1.eContents().get(0);
		private final RuleCall cIdsVariableIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cIdsVariableCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RealizabilityInputs:
		//	{RealizabilityInputs} "--%REALIZABLE" (ids+=[Variable] ("," ids+=[Variable])*)? ";";
		public ParserRule getRule() { return rule; }

		//{RealizabilityInputs} "--%REALIZABLE" (ids+=[Variable] ("," ids+=[Variable])*)? ";"
		public Group getGroup() { return cGroup; }

		//{RealizabilityInputs}
		public Action getRealizabilityInputsAction_0() { return cRealizabilityInputsAction_0; }

		//"--%REALIZABLE"
		public Keyword getREALIZABLEKeyword_1() { return cREALIZABLEKeyword_1; }

		//(ids+=[Variable] ("," ids+=[Variable])*)?
		public Group getGroup_2() { return cGroup_2; }

		//ids+=[Variable]
		public Assignment getIdsAssignment_2_0() { return cIdsAssignment_2_0; }

		//[Variable]
		public CrossReference getIdsVariableCrossReference_2_0_0() { return cIdsVariableCrossReference_2_0_0; }

		//ID
		public RuleCall getIdsVariableIDTerminalRuleCall_2_0_0_1() { return cIdsVariableIDTerminalRuleCall_2_0_0_1; }

		//("," ids+=[Variable])*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//ids+=[Variable]
		public Assignment getIdsAssignment_2_1_1() { return cIdsAssignment_2_1_1; }

		//[Variable]
		public CrossReference getIdsVariableCrossReference_2_1_1_0() { return cIdsVariableCrossReference_2_1_1_0; }

		//ID
		public RuleCall getIdsVariableIDTerminalRuleCall_2_1_1_0_1() { return cIdsVariableIDTerminalRuleCall_2_1_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Assertion:
		//	"assert" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//"assert" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"assert"
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }

		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final RuleCall cArrowExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	ArrowExpr;
		public ParserRule getRule() { return rule; }

		//ArrowExpr
		public RuleCall getArrowExprParserRuleCall() { return cArrowExprParserRuleCall; }
	}

	public class ArrowExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrowExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpHyphenMinusGreaterThanSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightArrowExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ArrowExpr returns Expr:
		//	ImpliesExpr (=> ({BinaryExpr.left=current} op="->") right=ArrowExpr)?;
		public ParserRule getRule() { return rule; }

		//ImpliesExpr (=> ({BinaryExpr.left=current} op="->") right=ArrowExpr)?
		public Group getGroup() { return cGroup; }

		//ImpliesExpr
		public RuleCall getImpliesExprParserRuleCall_0() { return cImpliesExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="->") right=ArrowExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="->")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="->"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="->"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"->"
		public Keyword getOpHyphenMinusGreaterThanSignKeyword_1_0_0_1_0() { return cOpHyphenMinusGreaterThanSignKeyword_1_0_0_1_0; }

		//right=ArrowExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ArrowExpr
		public RuleCall getRightArrowExprParserRuleCall_1_1_0() { return cRightArrowExprParserRuleCall_1_1_0; }
	}

	public class ImpliesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImpliesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightImpliesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ImpliesExpr returns Expr:
		//	OrExpr (=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?;
		public ParserRule getRule() { return rule; }

		//OrExpr (=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?
		public Group getGroup() { return cGroup; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_0() { return cOrExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="=>")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="=>"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="=>"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"=>"
		public Keyword getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0() { return cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0; }

		//right=ImpliesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ImpliesExpr
		public RuleCall getRightImpliesExprParserRuleCall_1_1_0() { return cRightImpliesExprParserRuleCall_1_1_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpOrKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpXorKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpr returns Expr:
		//	AndExpr (=> ({BinaryExpr.left=current} op=("or" | "xor")) right=AndExpr)*;
		public ParserRule getRule() { return rule; }

		//AndExpr (=> ({BinaryExpr.left=current} op=("or" | "xor")) right=AndExpr)*
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=("or" | "xor")) right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=("or" | "xor"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=("or" | "xor")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=("or" | "xor")
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"or" | "xor"
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//"or"
		public Keyword getOpOrKeyword_1_0_0_1_0_0() { return cOpOrKeyword_1_0_0_1_0_0; }

		//"xor"
		public Keyword getOpXorKeyword_1_0_0_1_0_1() { return cOpXorKeyword_1_0_0_1_0_1; }

		//right=AndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_1_0() { return cRightAndExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpAndKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRelationalExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpr returns Expr:
		//	RelationalExpr (=> ({BinaryExpr.left=current} op="and") right=RelationalExpr)*;
		public ParserRule getRule() { return rule; }

		//RelationalExpr (=> ({BinaryExpr.left=current} op="and") right=RelationalExpr)*
		public Group getGroup() { return cGroup; }

		//RelationalExpr
		public RuleCall getRelationalExprParserRuleCall_0() { return cRelationalExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="and") right=RelationalExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="and")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="and"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="and"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"and"
		public Keyword getOpAndKeyword_1_0_0_1_0() { return cOpAndKeyword_1_0_0_1_0; }

		//right=RelationalExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//RelationalExpr
		public RuleCall getRightRelationalExprParserRuleCall_1_1_0() { return cRightRelationalExprParserRuleCall_1_1_0; }
	}

	public class RelationalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_0_0_1_0_2 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_0_1_0_3 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(3);
		private final Keyword cOpEqualsSignKeyword_1_0_0_1_0_4 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(4);
		private final Keyword cOpLessThanSignGreaterThanSignKeyword_1_0_0_1_0_5 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPlusExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationalExpr returns Expr:
		//	PlusExpr (=> ({BinaryExpr.left=current} op=("<" | "<=" | ">" | ">=" | "=" | "<>")) right=PlusExpr)?;
		public ParserRule getRule() { return rule; }

		//PlusExpr (=> ({BinaryExpr.left=current} op=("<" | "<=" | ">" | ">=" | "=" | "<>")) right=PlusExpr)?
		public Group getGroup() { return cGroup; }

		//PlusExpr
		public RuleCall getPlusExprParserRuleCall_0() { return cPlusExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=("<" | "<=" | ">" | ">=" | "=" | "<>")) right=PlusExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=("<" | "<=" | ">" | ">=" | "=" | "<>"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=("<" | "<=" | ">" | ">=" | "=" | "<>")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=("<" | "<=" | ">" | ">=" | "=" | "<>")
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"<" | "<=" | ">" | ">=" | "=" | "<>"
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_0_0_1_0_0() { return cOpLessThanSignKeyword_1_0_0_1_0_0; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_0_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_0_0_1_0_1; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_0_0_1_0_2() { return cOpGreaterThanSignKeyword_1_0_0_1_0_2; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_0_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_0_0_1_0_3; }

		//"="
		public Keyword getOpEqualsSignKeyword_1_0_0_1_0_4() { return cOpEqualsSignKeyword_1_0_0_1_0_4; }

		//"<>"
		public Keyword getOpLessThanSignGreaterThanSignKeyword_1_0_0_1_0_5() { return cOpLessThanSignGreaterThanSignKeyword_1_0_0_1_0_5; }

		//right=PlusExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PlusExpr
		public RuleCall getRightPlusExprParserRuleCall_1_1_0() { return cRightPlusExprParserRuleCall_1_1_0; }
	}

	public class PlusExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlusExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTimesExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTimesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusExpr returns Expr:
		//	TimesExpr (=> ({BinaryExpr.left=current} op=("+" | "-")) right=TimesExpr)*;
		public ParserRule getRule() { return rule; }

		//TimesExpr (=> ({BinaryExpr.left=current} op=("+" | "-")) right=TimesExpr)*
		public Group getGroup() { return cGroup; }

		//TimesExpr
		public RuleCall getTimesExprParserRuleCall_0() { return cTimesExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=("+" | "-")) right=TimesExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=("+" | "-"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=("+" | "-")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_0_0_1_0_0() { return cOpPlusSignKeyword_1_0_0_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_0_0_1_0_1() { return cOpHyphenMinusKeyword_1_0_0_1_0_1; }

		//right=TimesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//TimesExpr
		public RuleCall getRightTimesExprParserRuleCall_1_1_0() { return cRightTimesExprParserRuleCall_1_1_0; }
	}

	public class TimesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Keyword cOpDivKeyword_1_0_0_1_0_2 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(2);
		private final Keyword cOpModKeyword_1_0_0_1_0_3 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrefixExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//TimesExpr returns Expr:
		//	PrefixExpr (=> ({BinaryExpr.left=current} op=("*" | "/" | "div" | "mod")) right=PrefixExpr)*;
		public ParserRule getRule() { return rule; }

		//PrefixExpr (=> ({BinaryExpr.left=current} op=("*" | "/" | "div" | "mod")) right=PrefixExpr)*
		public Group getGroup() { return cGroup; }

		//PrefixExpr
		public RuleCall getPrefixExprParserRuleCall_0() { return cPrefixExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=("*" | "/" | "div" | "mod")) right=PrefixExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=("*" | "/" | "div" | "mod"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=("*" | "/" | "div" | "mod")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=("*" | "/" | "div" | "mod")
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"*" | "/" | "div" | "mod"
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_0_0_1_0_0() { return cOpAsteriskKeyword_1_0_0_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_0_0_1_0_1() { return cOpSolidusKeyword_1_0_0_1_0_1; }

		//"div"
		public Keyword getOpDivKeyword_1_0_0_1_0_2() { return cOpDivKeyword_1_0_0_1_0_2; }

		//"mod"
		public Keyword getOpModKeyword_1_0_0_1_0_3() { return cOpModKeyword_1_0_0_1_0_3; }

		//right=PrefixExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrefixExpr
		public RuleCall getRightPrefixExprParserRuleCall_1_1_0() { return cRightPrefixExprParserRuleCall_1_1_0; }
	}

	public class PrefixExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpNotKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Keyword cOpPreKeyword_0_1_0_2 = (Keyword)cOpAlternatives_0_1_0.eContents().get(2);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprPrefixExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cAccessExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrefixExpr returns Expr:
		//	{UnaryExpr} op=("-" | "not" | "pre") expr=PrefixExpr | AccessExpr;
		public ParserRule getRule() { return rule; }

		//{UnaryExpr} op=("-" | "not" | "pre") expr=PrefixExpr | AccessExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryExpr} op=("-" | "not" | "pre") expr=PrefixExpr
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryExpr}
		public Action getUnaryExprAction_0_0() { return cUnaryExprAction_0_0; }

		//op=("-" | "not" | "pre")
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//"-" | "not" | "pre"
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_0_1_0_0() { return cOpHyphenMinusKeyword_0_1_0_0; }

		//"not"
		public Keyword getOpNotKeyword_0_1_0_1() { return cOpNotKeyword_0_1_0_1; }

		//"pre"
		public Keyword getOpPreKeyword_0_1_0_2() { return cOpPreKeyword_0_1_0_2; }

		//expr=PrefixExpr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//PrefixExpr
		public RuleCall getExprPrefixExprParserRuleCall_0_2_0() { return cExprPrefixExprParserRuleCall_0_2_0; }

		//AccessExpr
		public RuleCall getAccessExprParserRuleCall_1() { return cAccessExprParserRuleCall_1; }
	}

	public class AccessExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccessExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cRecordAccessExprRecordAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cFieldAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cFieldFieldCrossReference_1_0_1_0 = (CrossReference)cFieldAssignment_1_0_1.eContents().get(0);
		private final RuleCall cFieldFieldIDTerminalRuleCall_1_0_1_0_1 = (RuleCall)cFieldFieldCrossReference_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cRecordUpdateExprRecordAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0_0_1 = (Keyword)cGroup_1_1_0_0.eContents().get(1);
		private final Assignment cFieldAssignment_1_1_0_0_2 = (Assignment)cGroup_1_1_0_0.eContents().get(2);
		private final CrossReference cFieldFieldCrossReference_1_1_0_0_2_0 = (CrossReference)cFieldAssignment_1_1_0_0_2.eContents().get(0);
		private final RuleCall cFieldFieldIDTerminalRuleCall_1_1_0_0_2_0_1 = (RuleCall)cFieldFieldCrossReference_1_1_0_0_2_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_1_0_0_3 = (Keyword)cGroup_1_1_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueExprParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cArrayAccessExprArrayAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2_0_0_1 = (Keyword)cGroup_1_2_0_0.eContents().get(1);
		private final Assignment cIndexAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cIndexExprParserRuleCall_1_2_1_0 = (RuleCall)cIndexAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_2_2_0 = (Group)cGroup_1_2_2.eContents().get(0);
		private final Group cGroup_1_2_2_0_0 = (Group)cGroup_1_2_2_0.eContents().get(0);
		private final Action cArrayUpdateExprAccessAction_1_2_2_0_0_0 = (Action)cGroup_1_2_2_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_2_2_0_0_1 = (Keyword)cGroup_1_2_2_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cValueExprParserRuleCall_1_2_2_1_0 = (RuleCall)cValueAssignment_1_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		
		//AccessExpr returns Expr:
		//	AtomicExpr (=> ({RecordAccessExpr.record=current} ".") field=[Field] | => ({RecordUpdateExpr.record=current} "{"
		//	field=[Field] ":=") value=Expr "}" | => ({ArrayAccessExpr.array=current} "[") index=Expr (=>
		//	({ArrayUpdateExpr.access=current} ":=") value=Expr)? "]")*;
		public ParserRule getRule() { return rule; }

		//AtomicExpr (=> ({RecordAccessExpr.record=current} ".") field=[Field] | => ({RecordUpdateExpr.record=current} "{"
		//field=[Field] ":=") value=Expr "}" | => ({ArrayAccessExpr.array=current} "[") index=Expr (=>
		//({ArrayUpdateExpr.access=current} ":=") value=Expr)? "]")*
		public Group getGroup() { return cGroup; }

		//AtomicExpr
		public RuleCall getAtomicExprParserRuleCall_0() { return cAtomicExprParserRuleCall_0; }

		//(=> ({RecordAccessExpr.record=current} ".") field=[Field] | => ({RecordUpdateExpr.record=current} "{" field=[Field]
		//":=") value=Expr "}" | => ({ArrayAccessExpr.array=current} "[") index=Expr (=> ({ArrayUpdateExpr.access=current} ":=")
		//value=Expr)? "]")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({RecordAccessExpr.record=current} ".") field=[Field]
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({RecordAccessExpr.record=current} ".")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{RecordAccessExpr.record=current} "."
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{RecordAccessExpr.record=current}
		public Action getRecordAccessExprRecordAction_1_0_0_0_0() { return cRecordAccessExprRecordAction_1_0_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_0_0_1() { return cFullStopKeyword_1_0_0_0_1; }

		//field=[Field]
		public Assignment getFieldAssignment_1_0_1() { return cFieldAssignment_1_0_1; }

		//[Field]
		public CrossReference getFieldFieldCrossReference_1_0_1_0() { return cFieldFieldCrossReference_1_0_1_0; }

		//ID
		public RuleCall getFieldFieldIDTerminalRuleCall_1_0_1_0_1() { return cFieldFieldIDTerminalRuleCall_1_0_1_0_1; }

		//=> ({RecordUpdateExpr.record=current} "{" field=[Field] ":=") value=Expr "}"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({RecordUpdateExpr.record=current} "{" field=[Field] ":=")
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{RecordUpdateExpr.record=current} "{" field=[Field] ":="
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{RecordUpdateExpr.record=current}
		public Action getRecordUpdateExprRecordAction_1_1_0_0_0() { return cRecordUpdateExprRecordAction_1_1_0_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_0_0_1() { return cLeftCurlyBracketKeyword_1_1_0_0_1; }

		//field=[Field]
		public Assignment getFieldAssignment_1_1_0_0_2() { return cFieldAssignment_1_1_0_0_2; }

		//[Field]
		public CrossReference getFieldFieldCrossReference_1_1_0_0_2_0() { return cFieldFieldCrossReference_1_1_0_0_2_0; }

		//ID
		public RuleCall getFieldFieldIDTerminalRuleCall_1_1_0_0_2_0_1() { return cFieldFieldIDTerminalRuleCall_1_1_0_0_2_0_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_1_0_0_3() { return cColonEqualsSignKeyword_1_1_0_0_3; }

		//value=Expr
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }

		//Expr
		public RuleCall getValueExprParserRuleCall_1_1_1_0() { return cValueExprParserRuleCall_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }

		//=> ({ArrayAccessExpr.array=current} "[") index=Expr (=> ({ArrayUpdateExpr.access=current} ":=") value=Expr)? "]"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> ({ArrayAccessExpr.array=current} "[")
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//{ArrayAccessExpr.array=current} "["
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }

		//{ArrayAccessExpr.array=current}
		public Action getArrayAccessExprArrayAction_1_2_0_0_0() { return cArrayAccessExprArrayAction_1_2_0_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0_0_1() { return cLeftSquareBracketKeyword_1_2_0_0_1; }

		//index=Expr
		public Assignment getIndexAssignment_1_2_1() { return cIndexAssignment_1_2_1; }

		//Expr
		public RuleCall getIndexExprParserRuleCall_1_2_1_0() { return cIndexExprParserRuleCall_1_2_1_0; }

		//(=> ({ArrayUpdateExpr.access=current} ":=") value=Expr)?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//=> ({ArrayUpdateExpr.access=current} ":=")
		public Group getGroup_1_2_2_0() { return cGroup_1_2_2_0; }

		//{ArrayUpdateExpr.access=current} ":="
		public Group getGroup_1_2_2_0_0() { return cGroup_1_2_2_0_0; }

		//{ArrayUpdateExpr.access=current}
		public Action getArrayUpdateExprAccessAction_1_2_2_0_0_0() { return cArrayUpdateExprAccessAction_1_2_2_0_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_2_2_0_0_1() { return cColonEqualsSignKeyword_1_2_2_0_0_1; }

		//value=Expr
		public Assignment getValueAssignment_1_2_2_1() { return cValueAssignment_1_2_2_1; }

		//Expr
		public RuleCall getValueExprParserRuleCall_1_2_2_1_0() { return cValueExprParserRuleCall_1_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_3() { return cRightSquareBracketKeyword_1_2_3; }
	}

	public class AtomicExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIdExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cIdIdRefCrossReference_0_1_0 = (CrossReference)cIdAssignment_0_1.eContents().get(0);
		private final RuleCall cIdIdRefIDTerminalRuleCall_0_1_0_1 = (RuleCall)cIdIdRefCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_1_1_0 = (RuleCall)cValAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRealExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValREALParserRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolExprAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValBOOLParserRuleCall_3_1_0 = (RuleCall)cValAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cIfThenElseExprAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cIfKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cCondAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cCondExprParserRuleCall_4_2_0 = (RuleCall)cCondAssignment_4_2.eContents().get(0);
		private final Keyword cThenKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cThenAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cThenExprParserRuleCall_4_4_0 = (RuleCall)cThenAssignment_4_4.eContents().get(0);
		private final Keyword cElseKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Assignment cElseAssignment_4_6 = (Assignment)cGroup_4.eContents().get(6);
		private final RuleCall cElseExprParserRuleCall_4_6_0 = (RuleCall)cElseAssignment_4_6.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cCastExprAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cOpAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Alternatives cOpAlternatives_5_1_0 = (Alternatives)cOpAssignment_5_1.eContents().get(0);
		private final Keyword cOpRealKeyword_5_1_0_0 = (Keyword)cOpAlternatives_5_1_0.eContents().get(0);
		private final Keyword cOpFloorKeyword_5_1_0_1 = (Keyword)cOpAlternatives_5_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cExprAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_5_3_0 = (RuleCall)cExprAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final RuleCall cNodeCallExprParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cCondactExprAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cCondactKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cClockAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cClockExprParserRuleCall_7_3_0 = (RuleCall)cClockAssignment_7_3.eContents().get(0);
		private final Keyword cCommaKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cCallAssignment_7_5 = (Assignment)cGroup_7.eContents().get(5);
		private final RuleCall cCallNodeCallExprParserRuleCall_7_5_0 = (RuleCall)cCallAssignment_7_5.eContents().get(0);
		private final Group cGroup_7_6 = (Group)cGroup_7.eContents().get(6);
		private final Keyword cCommaKeyword_7_6_0 = (Keyword)cGroup_7_6.eContents().get(0);
		private final Assignment cArgsAssignment_7_6_1 = (Assignment)cGroup_7_6.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_7_6_1_0 = (RuleCall)cArgsAssignment_7_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_7 = (Keyword)cGroup_7.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cArrayExprAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cExprsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cExprsExprParserRuleCall_8_2_0 = (RuleCall)cExprsAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cExprsAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_8_3_1_0 = (RuleCall)cExprsAssignment_8_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cRecordExprAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cTypeAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cTypeRecordTypeCrossReference_9_1_0 = (CrossReference)cTypeAssignment_9_1.eContents().get(0);
		private final RuleCall cTypeRecordTypeIDTerminalRuleCall_9_1_0_1 = (RuleCall)cTypeRecordTypeCrossReference_9_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cFieldsAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final CrossReference cFieldsFieldCrossReference_9_3_0 = (CrossReference)cFieldsAssignment_9_3.eContents().get(0);
		private final RuleCall cFieldsFieldIDTerminalRuleCall_9_3_0_1 = (RuleCall)cFieldsFieldCrossReference_9_3_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Assignment cExprsAssignment_9_5 = (Assignment)cGroup_9.eContents().get(5);
		private final RuleCall cExprsExprParserRuleCall_9_5_0 = (RuleCall)cExprsAssignment_9_5.eContents().get(0);
		private final Group cGroup_9_6 = (Group)cGroup_9.eContents().get(6);
		private final Keyword cSemicolonKeyword_9_6_0 = (Keyword)cGroup_9_6.eContents().get(0);
		private final Assignment cFieldsAssignment_9_6_1 = (Assignment)cGroup_9_6.eContents().get(1);
		private final CrossReference cFieldsFieldCrossReference_9_6_1_0 = (CrossReference)cFieldsAssignment_9_6_1.eContents().get(0);
		private final RuleCall cFieldsFieldIDTerminalRuleCall_9_6_1_0_1 = (RuleCall)cFieldsFieldCrossReference_9_6_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_9_6_2 = (Keyword)cGroup_9_6.eContents().get(2);
		private final Assignment cExprsAssignment_9_6_3 = (Assignment)cGroup_9_6.eContents().get(3);
		private final RuleCall cExprsExprParserRuleCall_9_6_3_0 = (RuleCall)cExprsAssignment_9_6_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_7 = (Keyword)cGroup_9.eContents().get(7);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final RuleCall cExprParserRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Group cGroup_10_2 = (Group)cGroup_10.eContents().get(2);
		private final Action cTupleExprExprsAction_10_2_0 = (Action)cGroup_10_2.eContents().get(0);
		private final Group cGroup_10_2_1 = (Group)cGroup_10_2.eContents().get(1);
		private final Keyword cCommaKeyword_10_2_1_0 = (Keyword)cGroup_10_2_1.eContents().get(0);
		private final Assignment cExprsAssignment_10_2_1_1 = (Assignment)cGroup_10_2_1.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_10_2_1_1_0 = (RuleCall)cExprsAssignment_10_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		
		//AtomicExpr returns Expr:
		//	{IdExpr} id=[IdRef] | {IntExpr} val=INT | {RealExpr} val=REAL | {BoolExpr} val=BOOL | {IfThenElseExpr} "if" cond=Expr
		//	"then" then=Expr "else" else=Expr | {CastExpr} op=("real" | "floor") "(" expr=Expr ")" | NodeCallExpr | {CondactExpr}
		//	"condact" "(" clock=Expr "," call=NodeCallExpr ("," args+=Expr)* ")" | {ArrayExpr} "[" exprs+=Expr ("," exprs+=Expr)*
		//	"]" | {RecordExpr} type=[RecordType] "{" fields+=[Field] "=" exprs+=Expr (";" fields+=[Field] "=" exprs+=Expr)* "}" |
		//	"(" Expr ({TupleExpr.exprs+=current} ("," exprs+=Expr)+)? ")";
		public ParserRule getRule() { return rule; }

		//{IdExpr} id=[IdRef] | {IntExpr} val=INT | {RealExpr} val=REAL | {BoolExpr} val=BOOL | {IfThenElseExpr} "if" cond=Expr
		//"then" then=Expr "else" else=Expr | {CastExpr} op=("real" | "floor") "(" expr=Expr ")" | NodeCallExpr | {CondactExpr}
		//"condact" "(" clock=Expr "," call=NodeCallExpr ("," args+=Expr)* ")" | {ArrayExpr} "[" exprs+=Expr ("," exprs+=Expr)*
		//"]" | {RecordExpr} type=[RecordType] "{" fields+=[Field] "=" exprs+=Expr (";" fields+=[Field] "=" exprs+=Expr)* "}" |
		//"(" Expr ({TupleExpr.exprs+=current} ("," exprs+=Expr)+)? ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IdExpr} id=[IdRef]
		public Group getGroup_0() { return cGroup_0; }

		//{IdExpr}
		public Action getIdExprAction_0_0() { return cIdExprAction_0_0; }

		//id=[IdRef]
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }

		//[IdRef]
		public CrossReference getIdIdRefCrossReference_0_1_0() { return cIdIdRefCrossReference_0_1_0; }

		//ID
		public RuleCall getIdIdRefIDTerminalRuleCall_0_1_0_1() { return cIdIdRefIDTerminalRuleCall_0_1_0_1; }

		//{IntExpr} val=INT
		public Group getGroup_1() { return cGroup_1; }

		//{IntExpr}
		public Action getIntExprAction_1_0() { return cIntExprAction_1_0; }

		//val=INT
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_1_1_0() { return cValINTTerminalRuleCall_1_1_0; }

		//{RealExpr} val=REAL
		public Group getGroup_2() { return cGroup_2; }

		//{RealExpr}
		public Action getRealExprAction_2_0() { return cRealExprAction_2_0; }

		//val=REAL
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }

		//REAL
		public RuleCall getValREALParserRuleCall_2_1_0() { return cValREALParserRuleCall_2_1_0; }

		//{BoolExpr} val=BOOL
		public Group getGroup_3() { return cGroup_3; }

		//{BoolExpr}
		public Action getBoolExprAction_3_0() { return cBoolExprAction_3_0; }

		//val=BOOL
		public Assignment getValAssignment_3_1() { return cValAssignment_3_1; }

		//BOOL
		public RuleCall getValBOOLParserRuleCall_3_1_0() { return cValBOOLParserRuleCall_3_1_0; }

		//{IfThenElseExpr} "if" cond=Expr "then" then=Expr "else" else=Expr
		public Group getGroup_4() { return cGroup_4; }

		//{IfThenElseExpr}
		public Action getIfThenElseExprAction_4_0() { return cIfThenElseExprAction_4_0; }

		//"if"
		public Keyword getIfKeyword_4_1() { return cIfKeyword_4_1; }

		//cond=Expr
		public Assignment getCondAssignment_4_2() { return cCondAssignment_4_2; }

		//Expr
		public RuleCall getCondExprParserRuleCall_4_2_0() { return cCondExprParserRuleCall_4_2_0; }

		//"then"
		public Keyword getThenKeyword_4_3() { return cThenKeyword_4_3; }

		//then=Expr
		public Assignment getThenAssignment_4_4() { return cThenAssignment_4_4; }

		//Expr
		public RuleCall getThenExprParserRuleCall_4_4_0() { return cThenExprParserRuleCall_4_4_0; }

		//"else"
		public Keyword getElseKeyword_4_5() { return cElseKeyword_4_5; }

		//else=Expr
		public Assignment getElseAssignment_4_6() { return cElseAssignment_4_6; }

		//Expr
		public RuleCall getElseExprParserRuleCall_4_6_0() { return cElseExprParserRuleCall_4_6_0; }

		//{CastExpr} op=("real" | "floor") "(" expr=Expr ")"
		public Group getGroup_5() { return cGroup_5; }

		//{CastExpr}
		public Action getCastExprAction_5_0() { return cCastExprAction_5_0; }

		//op=("real" | "floor")
		public Assignment getOpAssignment_5_1() { return cOpAssignment_5_1; }

		//"real" | "floor"
		public Alternatives getOpAlternatives_5_1_0() { return cOpAlternatives_5_1_0; }

		//"real"
		public Keyword getOpRealKeyword_5_1_0_0() { return cOpRealKeyword_5_1_0_0; }

		//"floor"
		public Keyword getOpFloorKeyword_5_1_0_1() { return cOpFloorKeyword_5_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }

		//expr=Expr
		public Assignment getExprAssignment_5_3() { return cExprAssignment_5_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_5_3_0() { return cExprExprParserRuleCall_5_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }

		//NodeCallExpr
		public RuleCall getNodeCallExprParserRuleCall_6() { return cNodeCallExprParserRuleCall_6; }

		//{CondactExpr} "condact" "(" clock=Expr "," call=NodeCallExpr ("," args+=Expr)* ")"
		public Group getGroup_7() { return cGroup_7; }

		//{CondactExpr}
		public Action getCondactExprAction_7_0() { return cCondactExprAction_7_0; }

		//"condact"
		public Keyword getCondactKeyword_7_1() { return cCondactKeyword_7_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }

		//clock=Expr
		public Assignment getClockAssignment_7_3() { return cClockAssignment_7_3; }

		//Expr
		public RuleCall getClockExprParserRuleCall_7_3_0() { return cClockExprParserRuleCall_7_3_0; }

		//","
		public Keyword getCommaKeyword_7_4() { return cCommaKeyword_7_4; }

		//call=NodeCallExpr
		public Assignment getCallAssignment_7_5() { return cCallAssignment_7_5; }

		//NodeCallExpr
		public RuleCall getCallNodeCallExprParserRuleCall_7_5_0() { return cCallNodeCallExprParserRuleCall_7_5_0; }

		//("," args+=Expr)*
		public Group getGroup_7_6() { return cGroup_7_6; }

		//","
		public Keyword getCommaKeyword_7_6_0() { return cCommaKeyword_7_6_0; }

		//args+=Expr
		public Assignment getArgsAssignment_7_6_1() { return cArgsAssignment_7_6_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_7_6_1_0() { return cArgsExprParserRuleCall_7_6_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_7() { return cRightParenthesisKeyword_7_7; }

		//{ArrayExpr} "[" exprs+=Expr ("," exprs+=Expr)* "]"
		public Group getGroup_8() { return cGroup_8; }

		//{ArrayExpr}
		public Action getArrayExprAction_8_0() { return cArrayExprAction_8_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_8_1() { return cLeftSquareBracketKeyword_8_1; }

		//exprs+=Expr
		public Assignment getExprsAssignment_8_2() { return cExprsAssignment_8_2; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_8_2_0() { return cExprsExprParserRuleCall_8_2_0; }

		//("," exprs+=Expr)*
		public Group getGroup_8_3() { return cGroup_8_3; }

		//","
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }

		//exprs+=Expr
		public Assignment getExprsAssignment_8_3_1() { return cExprsAssignment_8_3_1; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_8_3_1_0() { return cExprsExprParserRuleCall_8_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8_4() { return cRightSquareBracketKeyword_8_4; }

		//{RecordExpr} type=[RecordType] "{" fields+=[Field] "=" exprs+=Expr (";" fields+=[Field] "=" exprs+=Expr)* "}"
		public Group getGroup_9() { return cGroup_9; }

		//{RecordExpr}
		public Action getRecordExprAction_9_0() { return cRecordExprAction_9_0; }

		//type=[RecordType]
		public Assignment getTypeAssignment_9_1() { return cTypeAssignment_9_1; }

		//[RecordType]
		public CrossReference getTypeRecordTypeCrossReference_9_1_0() { return cTypeRecordTypeCrossReference_9_1_0; }

		//ID
		public RuleCall getTypeRecordTypeIDTerminalRuleCall_9_1_0_1() { return cTypeRecordTypeIDTerminalRuleCall_9_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9_2() { return cLeftCurlyBracketKeyword_9_2; }

		//fields+=[Field]
		public Assignment getFieldsAssignment_9_3() { return cFieldsAssignment_9_3; }

		//[Field]
		public CrossReference getFieldsFieldCrossReference_9_3_0() { return cFieldsFieldCrossReference_9_3_0; }

		//ID
		public RuleCall getFieldsFieldIDTerminalRuleCall_9_3_0_1() { return cFieldsFieldIDTerminalRuleCall_9_3_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_9_4() { return cEqualsSignKeyword_9_4; }

		//exprs+=Expr
		public Assignment getExprsAssignment_9_5() { return cExprsAssignment_9_5; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_9_5_0() { return cExprsExprParserRuleCall_9_5_0; }

		//(";" fields+=[Field] "=" exprs+=Expr)*
		public Group getGroup_9_6() { return cGroup_9_6; }

		//";"
		public Keyword getSemicolonKeyword_9_6_0() { return cSemicolonKeyword_9_6_0; }

		//fields+=[Field]
		public Assignment getFieldsAssignment_9_6_1() { return cFieldsAssignment_9_6_1; }

		//[Field]
		public CrossReference getFieldsFieldCrossReference_9_6_1_0() { return cFieldsFieldCrossReference_9_6_1_0; }

		//ID
		public RuleCall getFieldsFieldIDTerminalRuleCall_9_6_1_0_1() { return cFieldsFieldIDTerminalRuleCall_9_6_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_9_6_2() { return cEqualsSignKeyword_9_6_2; }

		//exprs+=Expr
		public Assignment getExprsAssignment_9_6_3() { return cExprsAssignment_9_6_3; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_9_6_3_0() { return cExprsExprParserRuleCall_9_6_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9_7() { return cRightCurlyBracketKeyword_9_7; }

		//"(" Expr ({TupleExpr.exprs+=current} ("," exprs+=Expr)+)? ")"
		public Group getGroup_10() { return cGroup_10; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_0() { return cLeftParenthesisKeyword_10_0; }

		//Expr
		public RuleCall getExprParserRuleCall_10_1() { return cExprParserRuleCall_10_1; }

		//({TupleExpr.exprs+=current} ("," exprs+=Expr)+)?
		public Group getGroup_10_2() { return cGroup_10_2; }

		//{TupleExpr.exprs+=current}
		public Action getTupleExprExprsAction_10_2_0() { return cTupleExprExprsAction_10_2_0; }

		//("," exprs+=Expr)+
		public Group getGroup_10_2_1() { return cGroup_10_2_1; }

		//","
		public Keyword getCommaKeyword_10_2_1_0() { return cCommaKeyword_10_2_1_0; }

		//exprs+=Expr
		public Assignment getExprsAssignment_10_2_1_1() { return cExprsAssignment_10_2_1_1; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_10_2_1_1_0() { return cExprsExprParserRuleCall_10_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_3() { return cRightParenthesisKeyword_10_3; }
	}

	public class NodeCallExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeCallExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNodeNodeCrossReference_0_0 = (CrossReference)cNodeAssignment_0.eContents().get(0);
		private final RuleCall cNodeNodeIDTerminalRuleCall_0_0_1 = (RuleCall)cNodeNodeCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NodeCallExpr:
		//	node=[Node] "(" (args+=Expr ("," args+=Expr)*)? ")";
		public ParserRule getRule() { return rule; }

		//node=[Node] "(" (args+=Expr ("," args+=Expr)*)? ")"
		public Group getGroup() { return cGroup; }

		//node=[Node]
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }

		//[Node]
		public CrossReference getNodeNodeCrossReference_0_0() { return cNodeNodeCrossReference_0_0; }

		//ID
		public RuleCall getNodeNodeIDTerminalRuleCall_0_0_1() { return cNodeNodeIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=Expr ("," args+=Expr)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=Expr
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_2_0_0() { return cArgsExprParserRuleCall_2_0_0; }

		//("," args+=Expr)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=Expr
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_2_1_1_0() { return cArgsExprParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class IdRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IdRef:
		//	Constant | Variable | EnumValue;
		public ParserRule getRule() { return rule; }

		//Constant | Variable | EnumValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }

		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }

		//EnumValue
		public RuleCall getEnumValueParserRuleCall_2() { return cEnumValueParserRuleCall_2; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOL:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final FileElements pFile;
	private final TypeDefElements pTypeDef;
	private final EnumValueElements pEnumValue;
	private final TypeElements pType;
	private final ArrayTypeElements pArrayType;
	private final AtomicTypeElements pAtomicType;
	private final FieldElements pField;
	private final BoundElements pBound;
	private final ConstantElements pConstant;
	private final NodeElements pNode;
	private final VariableGroupElements pVariableGroup;
	private final VariableElements pVariable;
	private final EquationElements pEquation;
	private final PropertyElements pProperty;
	private final SupportElements pSupport;
	private final MainElements pMain;
	private final RealizabilityInputsElements pRealizabilityInputs;
	private final AssertionElements pAssertion;
	private final ExprElements pExpr;
	private final ArrowExprElements pArrowExpr;
	private final ImpliesExprElements pImpliesExpr;
	private final OrExprElements pOrExpr;
	private final AndExprElements pAndExpr;
	private final RelationalExprElements pRelationalExpr;
	private final PlusExprElements pPlusExpr;
	private final TimesExprElements pTimesExpr;
	private final PrefixExprElements pPrefixExpr;
	private final AccessExprElements pAccessExpr;
	private final AtomicExprElements pAtomicExpr;
	private final NodeCallExprElements pNodeCallExpr;
	private final IdRefElements pIdRef;
	private final REALElements pREAL;
	private final BOOLElements pBOOL;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tWS;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public JKindGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pFile = new FileElements();
		this.pTypeDef = new TypeDefElements();
		this.pEnumValue = new EnumValueElements();
		this.pType = new TypeElements();
		this.pArrayType = new ArrayTypeElements();
		this.pAtomicType = new AtomicTypeElements();
		this.pField = new FieldElements();
		this.pBound = new BoundElements();
		this.pConstant = new ConstantElements();
		this.pNode = new NodeElements();
		this.pVariableGroup = new VariableGroupElements();
		this.pVariable = new VariableElements();
		this.pEquation = new EquationElements();
		this.pProperty = new PropertyElements();
		this.pSupport = new SupportElements();
		this.pMain = new MainElements();
		this.pRealizabilityInputs = new RealizabilityInputsElements();
		this.pAssertion = new AssertionElements();
		this.pExpr = new ExprElements();
		this.pArrowExpr = new ArrowExprElements();
		this.pImpliesExpr = new ImpliesExprElements();
		this.pOrExpr = new OrExprElements();
		this.pAndExpr = new AndExprElements();
		this.pRelationalExpr = new RelationalExprElements();
		this.pPlusExpr = new PlusExprElements();
		this.pTimesExpr = new TimesExprElements();
		this.pPrefixExpr = new PrefixExprElements();
		this.pAccessExpr = new AccessExprElements();
		this.pAtomicExpr = new AtomicExprElements();
		this.pNodeCallExpr = new NodeCallExprElements();
		this.pIdRef = new IdRefElements();
		this.pREAL = new REALElements();
		this.pBOOL = new BOOLElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("jkind.xtext.JKind".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//File:
	//	(typedefs+=TypeDef | constants+=Constant | nodes+=Node)*;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	//TypeDef:
	//	{AbbreviationType} "type" name=ID "=" type=Type ";" | {RecordType} "type" name=ID "=" "struct" "{" fields+=Field ":"
	//	types+=Type (";" fields+=Field ":" types+=Type)* "}" ";" | {EnumType} "type" name=ID "=" "enum" "{" values+=EnumValue
	//	("," values+=EnumValue)* "}" ";";
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//EnumValue:
	//	{EnumValue} name=ID;
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}

	//Type:
	//	ArrayType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ArrayType returns Type:
	//	AtomicType ({ArrayType.base=current} "[" size=INT "]")*;
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}

	//AtomicType returns Type:
	//	{IntType} "int" | {BoolType} "bool" | {RealType} "real" | {SubrangeType} "subrange" "[" low=Bound "," high=Bound "]"
	//	"of" "int" | {UserType} def=[TypeDef];
	public AtomicTypeElements getAtomicTypeAccess() {
		return pAtomicType;
	}
	
	public ParserRule getAtomicTypeRule() {
		return getAtomicTypeAccess().getRule();
	}

	//Field:
	//	name=ID;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Bound returns ecore::EBigInteger:
	//	"-"? INT;
	public BoundElements getBoundAccess() {
		return pBound;
	}
	
	public ParserRule getBoundRule() {
		return getBoundAccess().getRule();
	}

	//Constant:
	//	"const" name=ID (":" type=Type)? "=" expr=Expr ";";
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//Node:
	//	"node" name=ID "(" (inputs+=VariableGroup (";" inputs+=VariableGroup)*)? ")" "returns" "(" (outputs+=VariableGroup
	//	(";" outputs+=VariableGroup)*)? ")" ";" ("var" (locals+=VariableGroup ";")*)? "let" (equations+=Equation |
	//	assertions+=Assertion | properties+=Property | main+=Main | support+=Support |
	//	realizabilityInputs+=RealizabilityInputs)* "tel" ";"?;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//VariableGroup:
	//	variables+=Variable ("," variables+=Variable)* ":" type=Type;
	public VariableGroupElements getVariableGroupAccess() {
		return pVariableGroup;
	}
	
	public ParserRule getVariableGroupRule() {
		return getVariableGroupAccess().getRule();
	}

	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Equation:
	//	lhs+=[Variable] ("," lhs+=[Variable])* "=" rhs=Expr ";" | "(" (lhs+=[Variable] ("," lhs+=[Variable])*)? ")" "="
	//	rhs=Expr ";";
	public EquationElements getEquationAccess() {
		return pEquation;
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	//Property:
	//	"--%PROPERTY" ref=[Variable] ";";
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Support:
	//	{Support} "--%SUPPORT" (ids+=[Variable] ("," ids+=[Variable])*)? ";";
	public SupportElements getSupportAccess() {
		return pSupport;
	}
	
	public ParserRule getSupportRule() {
		return getSupportAccess().getRule();
	}

	//Main:
	//	"--%MAIN" ";"?;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}

	//RealizabilityInputs:
	//	{RealizabilityInputs} "--%REALIZABLE" (ids+=[Variable] ("," ids+=[Variable])*)? ";";
	public RealizabilityInputsElements getRealizabilityInputsAccess() {
		return pRealizabilityInputs;
	}
	
	public ParserRule getRealizabilityInputsRule() {
		return getRealizabilityInputsAccess().getRule();
	}

	//Assertion:
	//	"assert" expr=Expr ";";
	public AssertionElements getAssertionAccess() {
		return pAssertion;
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	//Expr:
	//	ArrowExpr;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ArrowExpr returns Expr:
	//	ImpliesExpr (=> ({BinaryExpr.left=current} op="->") right=ArrowExpr)?;
	public ArrowExprElements getArrowExprAccess() {
		return pArrowExpr;
	}
	
	public ParserRule getArrowExprRule() {
		return getArrowExprAccess().getRule();
	}

	//ImpliesExpr returns Expr:
	//	OrExpr (=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?;
	public ImpliesExprElements getImpliesExprAccess() {
		return pImpliesExpr;
	}
	
	public ParserRule getImpliesExprRule() {
		return getImpliesExprAccess().getRule();
	}

	//OrExpr returns Expr:
	//	AndExpr (=> ({BinaryExpr.left=current} op=("or" | "xor")) right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr returns Expr:
	//	RelationalExpr (=> ({BinaryExpr.left=current} op="and") right=RelationalExpr)*;
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//RelationalExpr returns Expr:
	//	PlusExpr (=> ({BinaryExpr.left=current} op=("<" | "<=" | ">" | ">=" | "=" | "<>")) right=PlusExpr)?;
	public RelationalExprElements getRelationalExprAccess() {
		return pRelationalExpr;
	}
	
	public ParserRule getRelationalExprRule() {
		return getRelationalExprAccess().getRule();
	}

	//PlusExpr returns Expr:
	//	TimesExpr (=> ({BinaryExpr.left=current} op=("+" | "-")) right=TimesExpr)*;
	public PlusExprElements getPlusExprAccess() {
		return pPlusExpr;
	}
	
	public ParserRule getPlusExprRule() {
		return getPlusExprAccess().getRule();
	}

	//TimesExpr returns Expr:
	//	PrefixExpr (=> ({BinaryExpr.left=current} op=("*" | "/" | "div" | "mod")) right=PrefixExpr)*;
	public TimesExprElements getTimesExprAccess() {
		return pTimesExpr;
	}
	
	public ParserRule getTimesExprRule() {
		return getTimesExprAccess().getRule();
	}

	//PrefixExpr returns Expr:
	//	{UnaryExpr} op=("-" | "not" | "pre") expr=PrefixExpr | AccessExpr;
	public PrefixExprElements getPrefixExprAccess() {
		return pPrefixExpr;
	}
	
	public ParserRule getPrefixExprRule() {
		return getPrefixExprAccess().getRule();
	}

	//AccessExpr returns Expr:
	//	AtomicExpr (=> ({RecordAccessExpr.record=current} ".") field=[Field] | => ({RecordUpdateExpr.record=current} "{"
	//	field=[Field] ":=") value=Expr "}" | => ({ArrayAccessExpr.array=current} "[") index=Expr (=>
	//	({ArrayUpdateExpr.access=current} ":=") value=Expr)? "]")*;
	public AccessExprElements getAccessExprAccess() {
		return pAccessExpr;
	}
	
	public ParserRule getAccessExprRule() {
		return getAccessExprAccess().getRule();
	}

	//AtomicExpr returns Expr:
	//	{IdExpr} id=[IdRef] | {IntExpr} val=INT | {RealExpr} val=REAL | {BoolExpr} val=BOOL | {IfThenElseExpr} "if" cond=Expr
	//	"then" then=Expr "else" else=Expr | {CastExpr} op=("real" | "floor") "(" expr=Expr ")" | NodeCallExpr | {CondactExpr}
	//	"condact" "(" clock=Expr "," call=NodeCallExpr ("," args+=Expr)* ")" | {ArrayExpr} "[" exprs+=Expr ("," exprs+=Expr)*
	//	"]" | {RecordExpr} type=[RecordType] "{" fields+=[Field] "=" exprs+=Expr (";" fields+=[Field] "=" exprs+=Expr)* "}" |
	//	"(" Expr ({TupleExpr.exprs+=current} ("," exprs+=Expr)+)? ")";
	public AtomicExprElements getAtomicExprAccess() {
		return pAtomicExpr;
	}
	
	public ParserRule getAtomicExprRule() {
		return getAtomicExprAccess().getRule();
	}

	//NodeCallExpr:
	//	node=[Node] "(" (args+=Expr ("," args+=Expr)*)? ")";
	public NodeCallExprElements getNodeCallExprAccess() {
		return pNodeCallExpr;
	}
	
	public ParserRule getNodeCallExprRule() {
		return getNodeCallExprAccess().getRule();
	}

	//IdRef:
	//	Constant | Variable | EnumValue;
	public IdRefElements getIdRefAccess() {
		return pIdRef;
	}
	
	public ParserRule getIdRefRule() {
		return getIdRefAccess().getRule();
	}

	//REAL:
	//	INT "." INT;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//BOOL:
	//	"true" | "false";
	public BOOLElements getBOOLAccess() {
		return pBOOL;
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal INT returns ecore::EBigInteger:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal SL_COMMENT:
	//	"--" (!("%" | "\r" | "\n") !("\r" | "\n")*)? ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 
}
