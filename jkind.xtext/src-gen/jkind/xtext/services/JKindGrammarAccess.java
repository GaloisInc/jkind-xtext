/*
* generated by Xtext
*/
package jkind.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JKindGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "File");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypedefsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypedefsTypedefParserRuleCall_0_0 = (RuleCall)cTypedefsAssignment_0.eContents().get(0);
		private final Assignment cConstantsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstantsConstantParserRuleCall_1_0 = (RuleCall)cConstantsAssignment_1.eContents().get(0);
		private final Assignment cNodesAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNodesNodeParserRuleCall_2_0 = (RuleCall)cNodesAssignment_2.eContents().get(0);
		
		//File:
		//	(typedefs+=Typedef | constants+=Constant | nodes+=Node)*;
		public ParserRule getRule() { return rule; }

		//(typedefs+=Typedef | constants+=Constant | nodes+=Node)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//typedefs+=Typedef
		public Assignment getTypedefsAssignment_0() { return cTypedefsAssignment_0; }

		//Typedef
		public RuleCall getTypedefsTypedefParserRuleCall_0_0() { return cTypedefsTypedefParserRuleCall_0_0; }

		//constants+=Constant
		public Assignment getConstantsAssignment_1() { return cConstantsAssignment_1; }

		//Constant
		public RuleCall getConstantsConstantParserRuleCall_1_0() { return cConstantsConstantParserRuleCall_1_0; }

		//nodes+=Node
		public Assignment getNodesAssignment_2() { return cNodesAssignment_2; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_2_0() { return cNodesNodeParserRuleCall_2_0; }
	}

	public class TypedefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Typedef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTopLevelTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Typedef:
		//	"type" name=ID "=" type=TopLevelType ";";
		public ParserRule getRule() { return rule; }

		//"type" name=ID "=" type=TopLevelType ";"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//type=TopLevelType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TopLevelType
		public RuleCall getTypeTopLevelTypeParserRuleCall_3_0() { return cTypeTopLevelTypeParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TopLevelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRecordTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cStructKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cFieldsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cFieldsIDTerminalRuleCall_0_3_0 = (RuleCall)cFieldsAssignment_0_3.eContents().get(0);
		private final Keyword cColonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cTypesAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final CrossReference cTypesTypeCrossReference_0_5_0 = (CrossReference)cTypesAssignment_0_5.eContents().get(0);
		private final RuleCall cTypesTypeIDTerminalRuleCall_0_5_0_1 = (RuleCall)cTypesTypeCrossReference_0_5_0.eContents().get(1);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cSemicolonKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cFieldsAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cFieldsIDTerminalRuleCall_0_6_1_0 = (RuleCall)cFieldsAssignment_0_6_1.eContents().get(0);
		private final Keyword cColonKeyword_0_6_2 = (Keyword)cGroup_0_6.eContents().get(2);
		private final Assignment cTypesAssignment_0_6_3 = (Assignment)cGroup_0_6.eContents().get(3);
		private final CrossReference cTypesTypeCrossReference_0_6_3_0 = (CrossReference)cTypesAssignment_0_6_3.eContents().get(0);
		private final RuleCall cTypesTypeIDTerminalRuleCall_0_6_3_0_1 = (RuleCall)cTypesTypeCrossReference_0_6_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TopLevelType:
		//	{RecordType} "struct" "{" fields+=ID ":" types+=[Type] (";" fields+=ID ":" types+=[Type])* "}" | Type;
		public ParserRule getRule() { return rule; }

		//{RecordType} "struct" "{" fields+=ID ":" types+=[Type] (";" fields+=ID ":" types+=[Type])* "}" | Type
		public Alternatives getAlternatives() { return cAlternatives; }

		//{RecordType} "struct" "{" fields+=ID ":" types+=[Type] (";" fields+=ID ":" types+=[Type])* "}"
		public Group getGroup_0() { return cGroup_0; }

		//{RecordType}
		public Action getRecordTypeAction_0_0() { return cRecordTypeAction_0_0; }

		//"struct"
		public Keyword getStructKeyword_0_1() { return cStructKeyword_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//fields+=ID
		public Assignment getFieldsAssignment_0_3() { return cFieldsAssignment_0_3; }

		//ID
		public RuleCall getFieldsIDTerminalRuleCall_0_3_0() { return cFieldsIDTerminalRuleCall_0_3_0; }

		//":"
		public Keyword getColonKeyword_0_4() { return cColonKeyword_0_4; }

		//types+=[Type]
		public Assignment getTypesAssignment_0_5() { return cTypesAssignment_0_5; }

		//[Type]
		public CrossReference getTypesTypeCrossReference_0_5_0() { return cTypesTypeCrossReference_0_5_0; }

		//ID
		public RuleCall getTypesTypeIDTerminalRuleCall_0_5_0_1() { return cTypesTypeIDTerminalRuleCall_0_5_0_1; }

		//(";" fields+=ID ":" types+=[Type])*
		public Group getGroup_0_6() { return cGroup_0_6; }

		//";"
		public Keyword getSemicolonKeyword_0_6_0() { return cSemicolonKeyword_0_6_0; }

		//fields+=ID
		public Assignment getFieldsAssignment_0_6_1() { return cFieldsAssignment_0_6_1; }

		//ID
		public RuleCall getFieldsIDTerminalRuleCall_0_6_1_0() { return cFieldsIDTerminalRuleCall_0_6_1_0; }

		//":"
		public Keyword getColonKeyword_0_6_2() { return cColonKeyword_0_6_2; }

		//types+=[Type]
		public Assignment getTypesAssignment_0_6_3() { return cTypesAssignment_0_6_3; }

		//[Type]
		public CrossReference getTypesTypeCrossReference_0_6_3_0() { return cTypesTypeCrossReference_0_6_3_0; }

		//ID
		public RuleCall getTypesTypeIDTerminalRuleCall_0_6_3_0_1() { return cTypesTypeIDTerminalRuleCall_0_6_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_7() { return cRightCurlyBracketKeyword_0_7; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIntKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBoolKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRealTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cRealKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSubrangeTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSubrangeKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cLowAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cLowBoundParserRuleCall_3_3_0 = (RuleCall)cLowAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cHighAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cHighBoundParserRuleCall_3_5_0 = (RuleCall)cHighAssignment_3_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Keyword cOfKeyword_3_7 = (Keyword)cGroup_3.eContents().get(7);
		private final Keyword cIntKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cUserTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cDefAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cDefTypedefCrossReference_4_1_0 = (CrossReference)cDefAssignment_4_1.eContents().get(0);
		private final RuleCall cDefTypedefIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDefTypedefCrossReference_4_1_0.eContents().get(1);
		
		//Type:
		//	{IntType} "int" | {BoolType} "bool" | {RealType} "real" | {SubrangeType} "subrange" "[" low=Bound "," high=Bound "]"
		//	"of" "int" | {UserType} def=[Typedef];
		public ParserRule getRule() { return rule; }

		//{IntType} "int" | {BoolType} "bool" | {RealType} "real" | {SubrangeType} "subrange" "[" low=Bound "," high=Bound "]"
		//"of" "int" | {UserType} def=[Typedef]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntType} "int"
		public Group getGroup_0() { return cGroup_0; }

		//{IntType}
		public Action getIntTypeAction_0_0() { return cIntTypeAction_0_0; }

		//"int"
		public Keyword getIntKeyword_0_1() { return cIntKeyword_0_1; }

		//{BoolType} "bool"
		public Group getGroup_1() { return cGroup_1; }

		//{BoolType}
		public Action getBoolTypeAction_1_0() { return cBoolTypeAction_1_0; }

		//"bool"
		public Keyword getBoolKeyword_1_1() { return cBoolKeyword_1_1; }

		//{RealType} "real"
		public Group getGroup_2() { return cGroup_2; }

		//{RealType}
		public Action getRealTypeAction_2_0() { return cRealTypeAction_2_0; }

		//"real"
		public Keyword getRealKeyword_2_1() { return cRealKeyword_2_1; }

		//{SubrangeType} "subrange" "[" low=Bound "," high=Bound "]" "of" "int"
		public Group getGroup_3() { return cGroup_3; }

		//{SubrangeType}
		public Action getSubrangeTypeAction_3_0() { return cSubrangeTypeAction_3_0; }

		//"subrange"
		public Keyword getSubrangeKeyword_3_1() { return cSubrangeKeyword_3_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_2() { return cLeftSquareBracketKeyword_3_2; }

		//low=Bound
		public Assignment getLowAssignment_3_3() { return cLowAssignment_3_3; }

		//Bound
		public RuleCall getLowBoundParserRuleCall_3_3_0() { return cLowBoundParserRuleCall_3_3_0; }

		//","
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }

		//high=Bound
		public Assignment getHighAssignment_3_5() { return cHighAssignment_3_5; }

		//Bound
		public RuleCall getHighBoundParserRuleCall_3_5_0() { return cHighBoundParserRuleCall_3_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_6() { return cRightSquareBracketKeyword_3_6; }

		//"of"
		public Keyword getOfKeyword_3_7() { return cOfKeyword_3_7; }

		//"int"
		public Keyword getIntKeyword_3_8() { return cIntKeyword_3_8; }

		//{UserType} def=[Typedef]
		public Group getGroup_4() { return cGroup_4; }

		//{UserType}
		public Action getUserTypeAction_4_0() { return cUserTypeAction_4_0; }

		//def=[Typedef]
		public Assignment getDefAssignment_4_1() { return cDefAssignment_4_1; }

		//[Typedef]
		public CrossReference getDefTypedefCrossReference_4_1_0() { return cDefTypedefCrossReference_4_1_0; }

		//ID
		public RuleCall getDefTypedefIDTerminalRuleCall_4_1_0_1() { return cDefTypedefIDTerminalRuleCall_4_1_0_1; }
	}

	public class BoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Bound returns ecore::EInt:
		//	"-" INT;
		public ParserRule getRule() { return rule; }

		//"-" INT
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Constant:
		//	"const" name=ID (":" type=Type)? "=" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//"const" name=ID (":" type=Type)? "=" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":" type=Type)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expr=Expr
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_4_0() { return cExprExprParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class IdRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IdRef:
		//	Constant | Var;
		public ParserRule getRule() { return rule; }

		//Constant | Var
		public Alternatives getAlternatives() { return cAlternatives; }

		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }

		//Var
		public RuleCall getVarParserRuleCall_1() { return cVarParserRuleCall_1; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInputsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInputsVarGroupParserRuleCall_3_0_0 = (RuleCall)cInputsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInputsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInputsVarGroupParserRuleCall_3_1_1_0 = (RuleCall)cInputsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cReturnsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cOutputsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cOutputsVarGroupParserRuleCall_7_0_0 = (RuleCall)cOutputsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cSemicolonKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cOutputsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cOutputsVarGroupParserRuleCall_7_1_1_0 = (RuleCall)cOutputsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cVarKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Assignment cLocalsAssignment_10_1_0 = (Assignment)cGroup_10_1.eContents().get(0);
		private final RuleCall cLocalsVarGroupParserRuleCall_10_1_0_0 = (RuleCall)cLocalsAssignment_10_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_1_1 = (Keyword)cGroup_10_1.eContents().get(1);
		private final Keyword cLetKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Alternatives cAlternatives_12 = (Alternatives)cGroup.eContents().get(12);
		private final Assignment cEquationsAssignment_12_0 = (Assignment)cAlternatives_12.eContents().get(0);
		private final RuleCall cEquationsEquationParserRuleCall_12_0_0 = (RuleCall)cEquationsAssignment_12_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_12_1 = (Assignment)cAlternatives_12.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_12_1_0 = (RuleCall)cPropertiesAssignment_12_1.eContents().get(0);
		private final Assignment cAssertionsAssignment_12_2 = (Assignment)cAlternatives_12.eContents().get(2);
		private final RuleCall cAssertionsAssertionParserRuleCall_12_2_0 = (RuleCall)cAssertionsAssignment_12_2.eContents().get(0);
		private final Assignment cMainAssignment_12_3 = (Assignment)cAlternatives_12.eContents().get(3);
		private final RuleCall cMainMainParserRuleCall_12_3_0 = (RuleCall)cMainAssignment_12_3.eContents().get(0);
		private final Keyword cTelKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Node:
		//	"node" name=ID "(" (inputs+=VarGroup (";" inputs+=VarGroup)*)? ")" "returns" "(" (outputs+=VarGroup (";"
		//	outputs+=VarGroup)*)? ")" ";" ("var" (locals+=VarGroup ";")*)? "let" (equations+=Equation | properties+=Property |
		//	assertions+=Assertion | main+=Main)* "tel" ";"?;
		public ParserRule getRule() { return rule; }

		//"node" name=ID "(" (inputs+=VarGroup (";" inputs+=VarGroup)*)? ")" "returns" "(" (outputs+=VarGroup (";"
		//outputs+=VarGroup)*)? ")" ";" ("var" (locals+=VarGroup ";")*)? "let" (equations+=Equation | properties+=Property |
		//assertions+=Assertion | main+=Main)* "tel" ";"?
		public Group getGroup() { return cGroup; }

		//"node"
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(inputs+=VarGroup (";" inputs+=VarGroup)*)?
		public Group getGroup_3() { return cGroup_3; }

		//inputs+=VarGroup
		public Assignment getInputsAssignment_3_0() { return cInputsAssignment_3_0; }

		//VarGroup
		public RuleCall getInputsVarGroupParserRuleCall_3_0_0() { return cInputsVarGroupParserRuleCall_3_0_0; }

		//(";" inputs+=VarGroup)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//";"
		public Keyword getSemicolonKeyword_3_1_0() { return cSemicolonKeyword_3_1_0; }

		//inputs+=VarGroup
		public Assignment getInputsAssignment_3_1_1() { return cInputsAssignment_3_1_1; }

		//VarGroup
		public RuleCall getInputsVarGroupParserRuleCall_3_1_1_0() { return cInputsVarGroupParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"returns"
		public Keyword getReturnsKeyword_5() { return cReturnsKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(outputs+=VarGroup (";" outputs+=VarGroup)*)?
		public Group getGroup_7() { return cGroup_7; }

		//outputs+=VarGroup
		public Assignment getOutputsAssignment_7_0() { return cOutputsAssignment_7_0; }

		//VarGroup
		public RuleCall getOutputsVarGroupParserRuleCall_7_0_0() { return cOutputsVarGroupParserRuleCall_7_0_0; }

		//(";" outputs+=VarGroup)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//";"
		public Keyword getSemicolonKeyword_7_1_0() { return cSemicolonKeyword_7_1_0; }

		//outputs+=VarGroup
		public Assignment getOutputsAssignment_7_1_1() { return cOutputsAssignment_7_1_1; }

		//VarGroup
		public RuleCall getOutputsVarGroupParserRuleCall_7_1_1_0() { return cOutputsVarGroupParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }

		//("var" (locals+=VarGroup ";")*)?
		public Group getGroup_10() { return cGroup_10; }

		//"var"
		public Keyword getVarKeyword_10_0() { return cVarKeyword_10_0; }

		//(locals+=VarGroup ";")*
		public Group getGroup_10_1() { return cGroup_10_1; }

		//locals+=VarGroup
		public Assignment getLocalsAssignment_10_1_0() { return cLocalsAssignment_10_1_0; }

		//VarGroup
		public RuleCall getLocalsVarGroupParserRuleCall_10_1_0_0() { return cLocalsVarGroupParserRuleCall_10_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_10_1_1() { return cSemicolonKeyword_10_1_1; }

		//"let"
		public Keyword getLetKeyword_11() { return cLetKeyword_11; }

		//(equations+=Equation | properties+=Property | assertions+=Assertion | main+=Main)*
		public Alternatives getAlternatives_12() { return cAlternatives_12; }

		//equations+=Equation
		public Assignment getEquationsAssignment_12_0() { return cEquationsAssignment_12_0; }

		//Equation
		public RuleCall getEquationsEquationParserRuleCall_12_0_0() { return cEquationsEquationParserRuleCall_12_0_0; }

		//properties+=Property
		public Assignment getPropertiesAssignment_12_1() { return cPropertiesAssignment_12_1; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_12_1_0() { return cPropertiesPropertyParserRuleCall_12_1_0; }

		//assertions+=Assertion
		public Assignment getAssertionsAssignment_12_2() { return cAssertionsAssignment_12_2; }

		//Assertion
		public RuleCall getAssertionsAssertionParserRuleCall_12_2_0() { return cAssertionsAssertionParserRuleCall_12_2_0; }

		//main+=Main
		public Assignment getMainAssignment_12_3() { return cMainAssignment_12_3; }

		//Main
		public RuleCall getMainMainParserRuleCall_12_3_0() { return cMainMainParserRuleCall_12_3_0; }

		//"tel"
		public Keyword getTelKeyword_13() { return cTelKeyword_13; }

		//";"?
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
	}

	public class VarGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsVarParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsVarParserRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VarGroup:
		//	vars+=Var ("," vars+=Var)* ":" type=Type;
		public ParserRule getRule() { return rule; }

		//vars+=Var ("," vars+=Var)* ":" type=Type
		public Group getGroup() { return cGroup; }

		//vars+=Var
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }

		//Var
		public RuleCall getVarsVarParserRuleCall_0_0() { return cVarsVarParserRuleCall_0_0; }

		//("," vars+=Var)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//vars+=Var
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }

		//Var
		public RuleCall getVarsVarParserRuleCall_1_1_0() { return cVarsVarParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Var:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLhsVarCrossReference_0_0 = (CrossReference)cLhsAssignment_0.eContents().get(0);
		private final RuleCall cLhsVarIDTerminalRuleCall_0_0_1 = (RuleCall)cLhsVarCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cLhsVarCrossReference_1_1_0 = (CrossReference)cLhsAssignment_1_1.eContents().get(0);
		private final RuleCall cLhsVarIDTerminalRuleCall_1_1_0_1 = (RuleCall)cLhsVarCrossReference_1_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsExprParserRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Equation:
		//	lhs+=[Var] ("," lhs+=[Var])* "=" rhs=Expr ";";
		public ParserRule getRule() { return rule; }

		//lhs+=[Var] ("," lhs+=[Var])* "=" rhs=Expr ";"
		public Group getGroup() { return cGroup; }

		//lhs+=[Var]
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//[Var]
		public CrossReference getLhsVarCrossReference_0_0() { return cLhsVarCrossReference_0_0; }

		//ID
		public RuleCall getLhsVarIDTerminalRuleCall_0_0_1() { return cLhsVarIDTerminalRuleCall_0_0_1; }

		//("," lhs+=[Var])*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//lhs+=[Var]
		public Assignment getLhsAssignment_1_1() { return cLhsAssignment_1_1; }

		//[Var]
		public CrossReference getLhsVarCrossReference_1_1_0() { return cLhsVarCrossReference_1_1_0; }

		//ID
		public RuleCall getLhsVarIDTerminalRuleCall_1_1_0_1() { return cLhsVarIDTerminalRuleCall_1_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//rhs=Expr
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }

		//Expr
		public RuleCall getRhsExprParserRuleCall_3_0() { return cRhsExprParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROPERTYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefVarCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefVarIDTerminalRuleCall_1_0_1 = (RuleCall)cRefVarCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Property:
		//	"--%PROPERTY" ref=[Var] ";";
		public ParserRule getRule() { return rule; }

		//"--%PROPERTY" ref=[Var] ";"
		public Group getGroup() { return cGroup; }

		//"--%PROPERTY"
		public Keyword getPROPERTYKeyword_0() { return cPROPERTYKeyword_0; }

		//ref=[Var]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[Var]
		public CrossReference getRefVarCrossReference_1_0() { return cRefVarCrossReference_1_0; }

		//ID
		public RuleCall getRefVarIDTerminalRuleCall_1_0_1() { return cRefVarIDTerminalRuleCall_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMAINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Main:
		//	"--%MAIN" ";"?;
		public ParserRule getRule() { return rule; }

		//"--%MAIN" ";"?
		public Group getGroup() { return cGroup; }

		//"--%MAIN"
		public Keyword getMAINKeyword_0() { return cMAINKeyword_0; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Assertion:
		//	"assert" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//"assert" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"assert"
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }

		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final RuleCall cArrowExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	ArrowExpr;
		public ParserRule getRule() { return rule; }

		//ArrowExpr
		public RuleCall getArrowExprParserRuleCall() { return cArrowExprParserRuleCall; }
	}

	public class ArrowExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrowExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpHyphenMinusGreaterThanSignKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightArrowExprParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//ArrowExpr returns Expr:
		//	ImpliesExpr => ({BinaryExpr.left=current} op="->" right=ArrowExpr)?;
		public ParserRule getRule() { return rule; }

		//ImpliesExpr => ({BinaryExpr.left=current} op="->" right=ArrowExpr)?
		public Group getGroup() { return cGroup; }

		//ImpliesExpr
		public RuleCall getImpliesExprParserRuleCall_0() { return cImpliesExprParserRuleCall_0; }

		//=> ({BinaryExpr.left=current} op="->" right=ArrowExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpr.left=current} op="->" right=ArrowExpr
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0() { return cBinaryExprLeftAction_1_0_0; }

		//op="->"
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"->"
		public Keyword getOpHyphenMinusGreaterThanSignKeyword_1_0_1_0() { return cOpHyphenMinusGreaterThanSignKeyword_1_0_1_0; }

		//right=ArrowExpr
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//ArrowExpr
		public RuleCall getRightArrowExprParserRuleCall_1_0_2_0() { return cRightArrowExprParserRuleCall_1_0_2_0; }
	}

	public class ImpliesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImpliesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpEqualsSignGreaterThanSignKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightImpliesExprParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//ImpliesExpr returns Expr:
		//	OrExpr => ({BinaryExpr.left=current} op="=>" right=ImpliesExpr)?;
		public ParserRule getRule() { return rule; }

		//OrExpr => ({BinaryExpr.left=current} op="=>" right=ImpliesExpr)?
		public Group getGroup() { return cGroup; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_0() { return cOrExprParserRuleCall_0; }

		//=> ({BinaryExpr.left=current} op="=>" right=ImpliesExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpr.left=current} op="=>" right=ImpliesExpr
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0() { return cBinaryExprLeftAction_1_0_0; }

		//op="=>"
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"=>"
		public Keyword getOpEqualsSignGreaterThanSignKeyword_1_0_1_0() { return cOpEqualsSignGreaterThanSignKeyword_1_0_1_0; }

		//right=ImpliesExpr
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//ImpliesExpr
		public RuleCall getRightImpliesExprParserRuleCall_1_0_2_0() { return cRightImpliesExprParserRuleCall_1_0_2_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpOrKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpXorKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightAndExprParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//OrExpr returns Expr:
		//	AndExpr => ({BinaryExpr.left=current} op=("or" | "xor") right=AndExpr)*;
		public ParserRule getRule() { return rule; }

		//AndExpr => ({BinaryExpr.left=current} op=("or" | "xor") right=AndExpr)*
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//=> ({BinaryExpr.left=current} op=("or" | "xor") right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpr.left=current} op=("or" | "xor") right=AndExpr
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0() { return cBinaryExprLeftAction_1_0_0; }

		//op=("or" | "xor")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"or" | "xor"
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }

		//"or"
		public Keyword getOpOrKeyword_1_0_1_0_0() { return cOpOrKeyword_1_0_1_0_0; }

		//"xor"
		public Keyword getOpXorKeyword_1_0_1_0_1() { return cOpXorKeyword_1_0_1_0_1; }

		//right=AndExpr
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_0_2_0() { return cRightAndExprParserRuleCall_1_0_2_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpAndKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightRelationalExprParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//AndExpr returns Expr:
		//	RelationalExpr => ({BinaryExpr.left=current} op="and" right=RelationalExpr)*;
		public ParserRule getRule() { return rule; }

		//RelationalExpr => ({BinaryExpr.left=current} op="and" right=RelationalExpr)*
		public Group getGroup() { return cGroup; }

		//RelationalExpr
		public RuleCall getRelationalExprParserRuleCall_0() { return cRelationalExprParserRuleCall_0; }

		//=> ({BinaryExpr.left=current} op="and" right=RelationalExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpr.left=current} op="and" right=RelationalExpr
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0() { return cBinaryExprLeftAction_1_0_0; }

		//op="and"
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"and"
		public Keyword getOpAndKeyword_1_0_1_0() { return cOpAndKeyword_1_0_1_0; }

		//right=RelationalExpr
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//RelationalExpr
		public RuleCall getRightRelationalExprParserRuleCall_1_0_2_0() { return cRightRelationalExprParserRuleCall_1_0_2_0; }
	}

	public class RelationalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(3);
		private final Keyword cOpEqualsSignKeyword_1_0_1_0_4 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(4);
		private final Keyword cOpLessThanSignGreaterThanSignKeyword_1_0_1_0_5 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightPlusExprParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//RelationalExpr returns Expr:
		//	PlusExpr => ({BinaryExpr.left=current} op=("<" | "<=" | ">" | ">=" | "=" | "<>") right=PlusExpr)?;
		public ParserRule getRule() { return rule; }

		//PlusExpr => ({BinaryExpr.left=current} op=("<" | "<=" | ">" | ">=" | "=" | "<>") right=PlusExpr)?
		public Group getGroup() { return cGroup; }

		//PlusExpr
		public RuleCall getPlusExprParserRuleCall_0() { return cPlusExprParserRuleCall_0; }

		//=> ({BinaryExpr.left=current} op=("<" | "<=" | ">" | ">=" | "=" | "<>") right=PlusExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpr.left=current} op=("<" | "<=" | ">" | ">=" | "=" | "<>") right=PlusExpr
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0() { return cBinaryExprLeftAction_1_0_0; }

		//op=("<" | "<=" | ">" | ">=" | "=" | "<>")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"<" | "<=" | ">" | ">=" | "=" | "<>"
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_0_1_0_0() { return cOpLessThanSignKeyword_1_0_1_0_0; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_0_1_0_1; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_0_1_0_2() { return cOpGreaterThanSignKeyword_1_0_1_0_2; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3; }

		//"="
		public Keyword getOpEqualsSignKeyword_1_0_1_0_4() { return cOpEqualsSignKeyword_1_0_1_0_4; }

		//"<>"
		public Keyword getOpLessThanSignGreaterThanSignKeyword_1_0_1_0_5() { return cOpLessThanSignGreaterThanSignKeyword_1_0_1_0_5; }

		//right=PlusExpr
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//PlusExpr
		public RuleCall getRightPlusExprParserRuleCall_1_0_2_0() { return cRightPlusExprParserRuleCall_1_0_2_0; }
	}

	public class PlusExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlusExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTimesExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightTimesExprParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//PlusExpr returns Expr:
		//	TimesExpr => ({BinaryExpr.left=current} op=("+" | "-") right=TimesExpr)*;
		public ParserRule getRule() { return rule; }

		//TimesExpr => ({BinaryExpr.left=current} op=("+" | "-") right=TimesExpr)*
		public Group getGroup() { return cGroup; }

		//TimesExpr
		public RuleCall getTimesExprParserRuleCall_0() { return cTimesExprParserRuleCall_0; }

		//=> ({BinaryExpr.left=current} op=("+" | "-") right=TimesExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpr.left=current} op=("+" | "-") right=TimesExpr
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0() { return cBinaryExprLeftAction_1_0_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_0_1_0_0() { return cOpPlusSignKeyword_1_0_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_0_1_0_1() { return cOpHyphenMinusKeyword_1_0_1_0_1; }

		//right=TimesExpr
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//TimesExpr
		public RuleCall getRightTimesExprParserRuleCall_1_0_2_0() { return cRightTimesExprParserRuleCall_1_0_2_0; }
	}

	public class TimesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpDivKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightPrefixExprParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//TimesExpr returns Expr:
		//	PrefixExpr => ({BinaryExpr.left=current} op=("*" | "/" | "div") right=PrefixExpr)*;
		public ParserRule getRule() { return rule; }

		//PrefixExpr => ({BinaryExpr.left=current} op=("*" | "/" | "div") right=PrefixExpr)*
		public Group getGroup() { return cGroup; }

		//PrefixExpr
		public RuleCall getPrefixExprParserRuleCall_0() { return cPrefixExprParserRuleCall_0; }

		//=> ({BinaryExpr.left=current} op=("*" | "/" | "div") right=PrefixExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpr.left=current} op=("*" | "/" | "div") right=PrefixExpr
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0() { return cBinaryExprLeftAction_1_0_0; }

		//op=("*" | "/" | "div")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"*" | "/" | "div"
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_0_1_0_0() { return cOpAsteriskKeyword_1_0_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_0_1_0_1() { return cOpSolidusKeyword_1_0_1_0_1; }

		//"div"
		public Keyword getOpDivKeyword_1_0_1_0_2() { return cOpDivKeyword_1_0_1_0_2; }

		//right=PrefixExpr
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//PrefixExpr
		public RuleCall getRightPrefixExprParserRuleCall_1_0_2_0() { return cRightPrefixExprParserRuleCall_1_0_2_0; }
	}

	public class PrefixExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpNotKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Keyword cOpPreKeyword_0_1_0_2 = (Keyword)cOpAlternatives_0_1_0.eContents().get(2);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprPrefixExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cAtomicExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrefixExpr returns Expr:
		//	{UnaryExpr} op=("-" | "not" | "pre") expr=PrefixExpr | AtomicExpr;
		public ParserRule getRule() { return rule; }

		//{UnaryExpr} op=("-" | "not" | "pre") expr=PrefixExpr | AtomicExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryExpr} op=("-" | "not" | "pre") expr=PrefixExpr
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryExpr}
		public Action getUnaryExprAction_0_0() { return cUnaryExprAction_0_0; }

		//op=("-" | "not" | "pre")
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//"-" | "not" | "pre"
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_0_1_0_0() { return cOpHyphenMinusKeyword_0_1_0_0; }

		//"not"
		public Keyword getOpNotKeyword_0_1_0_1() { return cOpNotKeyword_0_1_0_1; }

		//"pre"
		public Keyword getOpPreKeyword_0_1_0_2() { return cOpPreKeyword_0_1_0_2; }

		//expr=PrefixExpr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//PrefixExpr
		public RuleCall getExprPrefixExprParserRuleCall_0_2_0() { return cExprPrefixExprParserRuleCall_0_2_0; }

		//AtomicExpr
		public RuleCall getAtomicExprParserRuleCall_1() { return cAtomicExprParserRuleCall_1; }
	}

	public class AtomicExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIdExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cIdIdRefCrossReference_0_1_0 = (CrossReference)cIdAssignment_0_1.eContents().get(0);
		private final RuleCall cIdIdRefIDTerminalRuleCall_0_1_0_1 = (RuleCall)cIdIdRefCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_1_1_0 = (RuleCall)cValAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRealExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValREALParserRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolExprAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValBOOLTerminalRuleCall_3_1_0 = (RuleCall)cValAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cIfThenElseExprAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cIfKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cCondAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cCondExprParserRuleCall_4_2_0 = (RuleCall)cCondAssignment_4_2.eContents().get(0);
		private final Keyword cThenKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cThenAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cThenExprParserRuleCall_4_4_0 = (RuleCall)cThenAssignment_4_4.eContents().get(0);
		private final Keyword cElseKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Assignment cElseAssignment_4_6 = (Assignment)cGroup_4.eContents().get(6);
		private final RuleCall cElseExprParserRuleCall_4_6_0 = (RuleCall)cElseAssignment_4_6.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNodeCallExprAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cNodeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cNodeNodeCrossReference_5_1_0 = (CrossReference)cNodeAssignment_5_1.eContents().get(0);
		private final RuleCall cNodeNodeIDTerminalRuleCall_5_1_0_1 = (RuleCall)cNodeNodeCrossReference_5_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Assignment cArgsAssignment_5_3_0 = (Assignment)cGroup_5_3.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_5_3_0_0 = (RuleCall)cArgsAssignment_5_3_0.eContents().get(0);
		private final Group cGroup_5_3_1 = (Group)cGroup_5_3.eContents().get(1);
		private final Keyword cCommaKeyword_5_3_1_0 = (Keyword)cGroup_5_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_5_3_1_1 = (Assignment)cGroup_5_3_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_5_3_1_1_0 = (RuleCall)cArgsAssignment_5_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cRecordExprAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cIdAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cIdTypedefCrossReference_6_1_0 = (CrossReference)cIdAssignment_6_1.eContents().get(0);
		private final RuleCall cIdTypedefIDTerminalRuleCall_6_1_0_1 = (RuleCall)cIdTypedefCrossReference_6_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cFieldsAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cFieldsIDTerminalRuleCall_6_3_0 = (RuleCall)cFieldsAssignment_6_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cExprsAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cExprsExprParserRuleCall_6_5_0 = (RuleCall)cExprsAssignment_6_5.eContents().get(0);
		private final Group cGroup_6_6 = (Group)cGroup_6.eContents().get(6);
		private final Keyword cSemicolonKeyword_6_6_0 = (Keyword)cGroup_6_6.eContents().get(0);
		private final Assignment cFieldsAssignment_6_6_1 = (Assignment)cGroup_6_6.eContents().get(1);
		private final RuleCall cFieldsIDTerminalRuleCall_6_6_1_0 = (RuleCall)cFieldsAssignment_6_6_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_6_2 = (Keyword)cGroup_6_6.eContents().get(2);
		private final Assignment cExprsAssignment_6_6_3 = (Assignment)cGroup_6_6.eContents().get(3);
		private final RuleCall cExprsExprParserRuleCall_6_6_3_0 = (RuleCall)cExprsAssignment_6_6_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_7 = (Keyword)cGroup_6.eContents().get(7);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cExprParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//AtomicExpr returns Expr:
		//	{IdExpr} id=[IdRef] | {IntExpr} val=INT | {RealExpr} val=REAL | {BoolExpr} val=BOOL | {IfThenElseExpr} "if" cond=Expr
		//	"then" then=Expr "else" else=Expr | {NodeCallExpr} node=[Node] "(" (args+=Expr ("," args+=Expr)*)? ")" | {RecordExpr}
		//	id=[Typedef] "{" fields+=ID "=" exprs+=Expr (";" fields+=ID "=" exprs+=Expr)* "}" | "(" Expr ")";
		public ParserRule getRule() { return rule; }

		//{IdExpr} id=[IdRef] | {IntExpr} val=INT | {RealExpr} val=REAL | {BoolExpr} val=BOOL | {IfThenElseExpr} "if" cond=Expr
		//"then" then=Expr "else" else=Expr | {NodeCallExpr} node=[Node] "(" (args+=Expr ("," args+=Expr)*)? ")" | {RecordExpr}
		//id=[Typedef] "{" fields+=ID "=" exprs+=Expr (";" fields+=ID "=" exprs+=Expr)* "}" | "(" Expr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IdExpr} id=[IdRef]
		public Group getGroup_0() { return cGroup_0; }

		//{IdExpr}
		public Action getIdExprAction_0_0() { return cIdExprAction_0_0; }

		//id=[IdRef]
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }

		//[IdRef]
		public CrossReference getIdIdRefCrossReference_0_1_0() { return cIdIdRefCrossReference_0_1_0; }

		//ID
		public RuleCall getIdIdRefIDTerminalRuleCall_0_1_0_1() { return cIdIdRefIDTerminalRuleCall_0_1_0_1; }

		//{IntExpr} val=INT
		public Group getGroup_1() { return cGroup_1; }

		//{IntExpr}
		public Action getIntExprAction_1_0() { return cIntExprAction_1_0; }

		//val=INT
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_1_1_0() { return cValINTTerminalRuleCall_1_1_0; }

		//{RealExpr} val=REAL
		public Group getGroup_2() { return cGroup_2; }

		//{RealExpr}
		public Action getRealExprAction_2_0() { return cRealExprAction_2_0; }

		//val=REAL
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }

		//REAL
		public RuleCall getValREALParserRuleCall_2_1_0() { return cValREALParserRuleCall_2_1_0; }

		//{BoolExpr} val=BOOL
		public Group getGroup_3() { return cGroup_3; }

		//{BoolExpr}
		public Action getBoolExprAction_3_0() { return cBoolExprAction_3_0; }

		//val=BOOL
		public Assignment getValAssignment_3_1() { return cValAssignment_3_1; }

		//BOOL
		public RuleCall getValBOOLTerminalRuleCall_3_1_0() { return cValBOOLTerminalRuleCall_3_1_0; }

		//{IfThenElseExpr} "if" cond=Expr "then" then=Expr "else" else=Expr
		public Group getGroup_4() { return cGroup_4; }

		//{IfThenElseExpr}
		public Action getIfThenElseExprAction_4_0() { return cIfThenElseExprAction_4_0; }

		//"if"
		public Keyword getIfKeyword_4_1() { return cIfKeyword_4_1; }

		//cond=Expr
		public Assignment getCondAssignment_4_2() { return cCondAssignment_4_2; }

		//Expr
		public RuleCall getCondExprParserRuleCall_4_2_0() { return cCondExprParserRuleCall_4_2_0; }

		//"then"
		public Keyword getThenKeyword_4_3() { return cThenKeyword_4_3; }

		//then=Expr
		public Assignment getThenAssignment_4_4() { return cThenAssignment_4_4; }

		//Expr
		public RuleCall getThenExprParserRuleCall_4_4_0() { return cThenExprParserRuleCall_4_4_0; }

		//"else"
		public Keyword getElseKeyword_4_5() { return cElseKeyword_4_5; }

		//else=Expr
		public Assignment getElseAssignment_4_6() { return cElseAssignment_4_6; }

		//Expr
		public RuleCall getElseExprParserRuleCall_4_6_0() { return cElseExprParserRuleCall_4_6_0; }

		//{NodeCallExpr} node=[Node] "(" (args+=Expr ("," args+=Expr)*)? ")"
		public Group getGroup_5() { return cGroup_5; }

		//{NodeCallExpr}
		public Action getNodeCallExprAction_5_0() { return cNodeCallExprAction_5_0; }

		//node=[Node]
		public Assignment getNodeAssignment_5_1() { return cNodeAssignment_5_1; }

		//[Node]
		public CrossReference getNodeNodeCrossReference_5_1_0() { return cNodeNodeCrossReference_5_1_0; }

		//ID
		public RuleCall getNodeNodeIDTerminalRuleCall_5_1_0_1() { return cNodeNodeIDTerminalRuleCall_5_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }

		//(args+=Expr ("," args+=Expr)*)?
		public Group getGroup_5_3() { return cGroup_5_3; }

		//args+=Expr
		public Assignment getArgsAssignment_5_3_0() { return cArgsAssignment_5_3_0; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_5_3_0_0() { return cArgsExprParserRuleCall_5_3_0_0; }

		//("," args+=Expr)*
		public Group getGroup_5_3_1() { return cGroup_5_3_1; }

		//","
		public Keyword getCommaKeyword_5_3_1_0() { return cCommaKeyword_5_3_1_0; }

		//args+=Expr
		public Assignment getArgsAssignment_5_3_1_1() { return cArgsAssignment_5_3_1_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_5_3_1_1_0() { return cArgsExprParserRuleCall_5_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }

		//{RecordExpr} id=[Typedef] "{" fields+=ID "=" exprs+=Expr (";" fields+=ID "=" exprs+=Expr)* "}"
		public Group getGroup_6() { return cGroup_6; }

		//{RecordExpr}
		public Action getRecordExprAction_6_0() { return cRecordExprAction_6_0; }

		//id=[Typedef]
		public Assignment getIdAssignment_6_1() { return cIdAssignment_6_1; }

		//[Typedef]
		public CrossReference getIdTypedefCrossReference_6_1_0() { return cIdTypedefCrossReference_6_1_0; }

		//ID
		public RuleCall getIdTypedefIDTerminalRuleCall_6_1_0_1() { return cIdTypedefIDTerminalRuleCall_6_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_2() { return cLeftCurlyBracketKeyword_6_2; }

		//fields+=ID
		public Assignment getFieldsAssignment_6_3() { return cFieldsAssignment_6_3; }

		//ID
		public RuleCall getFieldsIDTerminalRuleCall_6_3_0() { return cFieldsIDTerminalRuleCall_6_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_6_4() { return cEqualsSignKeyword_6_4; }

		//exprs+=Expr
		public Assignment getExprsAssignment_6_5() { return cExprsAssignment_6_5; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_6_5_0() { return cExprsExprParserRuleCall_6_5_0; }

		//(";" fields+=ID "=" exprs+=Expr)*
		public Group getGroup_6_6() { return cGroup_6_6; }

		//";"
		public Keyword getSemicolonKeyword_6_6_0() { return cSemicolonKeyword_6_6_0; }

		//fields+=ID
		public Assignment getFieldsAssignment_6_6_1() { return cFieldsAssignment_6_6_1; }

		//ID
		public RuleCall getFieldsIDTerminalRuleCall_6_6_1_0() { return cFieldsIDTerminalRuleCall_6_6_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_6_6_2() { return cEqualsSignKeyword_6_6_2; }

		//exprs+=Expr
		public Assignment getExprsAssignment_6_6_3() { return cExprsAssignment_6_6_3; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_6_6_3_0() { return cExprsExprParserRuleCall_6_6_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_7() { return cRightCurlyBracketKeyword_6_7; }

		//"(" Expr ")"
		public Group getGroup_7() { return cGroup_7; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }

		//Expr
		public RuleCall getExprParserRuleCall_7_1() { return cExprParserRuleCall_7_1; }

		//")"
		public Keyword getRightParenthesisKeyword_7_2() { return cRightParenthesisKeyword_7_2; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	private FileElements pFile;
	private TypedefElements pTypedef;
	private TopLevelTypeElements pTopLevelType;
	private TypeElements pType;
	private BoundElements pBound;
	private ConstantElements pConstant;
	private IdRefElements pIdRef;
	private NodeElements pNode;
	private VarGroupElements pVarGroup;
	private VarElements pVar;
	private EquationElements pEquation;
	private PropertyElements pProperty;
	private MainElements pMain;
	private AssertionElements pAssertion;
	private ExprElements pExpr;
	private ArrowExprElements pArrowExpr;
	private ImpliesExprElements pImpliesExpr;
	private OrExprElements pOrExpr;
	private AndExprElements pAndExpr;
	private RelationalExprElements pRelationalExpr;
	private PlusExprElements pPlusExpr;
	private TimesExprElements pTimesExpr;
	private PrefixExprElements pPrefixExpr;
	private AtomicExprElements pAtomicExpr;
	private REALElements pREAL;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tBOOL;
	private TerminalRule tID;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public JKindGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("jkind.xtext.JKind".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//File:
	//	(typedefs+=Typedef | constants+=Constant | nodes+=Node)*;
	public FileElements getFileAccess() {
		return (pFile != null) ? pFile : (pFile = new FileElements());
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	//Typedef:
	//	"type" name=ID "=" type=TopLevelType ";";
	public TypedefElements getTypedefAccess() {
		return (pTypedef != null) ? pTypedef : (pTypedef = new TypedefElements());
	}
	
	public ParserRule getTypedefRule() {
		return getTypedefAccess().getRule();
	}

	//TopLevelType:
	//	{RecordType} "struct" "{" fields+=ID ":" types+=[Type] (";" fields+=ID ":" types+=[Type])* "}" | Type;
	public TopLevelTypeElements getTopLevelTypeAccess() {
		return (pTopLevelType != null) ? pTopLevelType : (pTopLevelType = new TopLevelTypeElements());
	}
	
	public ParserRule getTopLevelTypeRule() {
		return getTopLevelTypeAccess().getRule();
	}

	//Type:
	//	{IntType} "int" | {BoolType} "bool" | {RealType} "real" | {SubrangeType} "subrange" "[" low=Bound "," high=Bound "]"
	//	"of" "int" | {UserType} def=[Typedef];
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Bound returns ecore::EInt:
	//	"-" INT;
	public BoundElements getBoundAccess() {
		return (pBound != null) ? pBound : (pBound = new BoundElements());
	}
	
	public ParserRule getBoundRule() {
		return getBoundAccess().getRule();
	}

	//Constant:
	//	"const" name=ID (":" type=Type)? "=" expr=Expr ";";
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//IdRef:
	//	Constant | Var;
	public IdRefElements getIdRefAccess() {
		return (pIdRef != null) ? pIdRef : (pIdRef = new IdRefElements());
	}
	
	public ParserRule getIdRefRule() {
		return getIdRefAccess().getRule();
	}

	//Node:
	//	"node" name=ID "(" (inputs+=VarGroup (";" inputs+=VarGroup)*)? ")" "returns" "(" (outputs+=VarGroup (";"
	//	outputs+=VarGroup)*)? ")" ";" ("var" (locals+=VarGroup ";")*)? "let" (equations+=Equation | properties+=Property |
	//	assertions+=Assertion | main+=Main)* "tel" ";"?;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//VarGroup:
	//	vars+=Var ("," vars+=Var)* ":" type=Type;
	public VarGroupElements getVarGroupAccess() {
		return (pVarGroup != null) ? pVarGroup : (pVarGroup = new VarGroupElements());
	}
	
	public ParserRule getVarGroupRule() {
		return getVarGroupAccess().getRule();
	}

	//Var:
	//	name=ID;
	public VarElements getVarAccess() {
		return (pVar != null) ? pVar : (pVar = new VarElements());
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//Equation:
	//	lhs+=[Var] ("," lhs+=[Var])* "=" rhs=Expr ";";
	public EquationElements getEquationAccess() {
		return (pEquation != null) ? pEquation : (pEquation = new EquationElements());
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	//Property:
	//	"--%PROPERTY" ref=[Var] ";";
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Main:
	//	"--%MAIN" ";"?;
	public MainElements getMainAccess() {
		return (pMain != null) ? pMain : (pMain = new MainElements());
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}

	//Assertion:
	//	"assert" expr=Expr ";";
	public AssertionElements getAssertionAccess() {
		return (pAssertion != null) ? pAssertion : (pAssertion = new AssertionElements());
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	//Expr:
	//	ArrowExpr;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ArrowExpr returns Expr:
	//	ImpliesExpr => ({BinaryExpr.left=current} op="->" right=ArrowExpr)?;
	public ArrowExprElements getArrowExprAccess() {
		return (pArrowExpr != null) ? pArrowExpr : (pArrowExpr = new ArrowExprElements());
	}
	
	public ParserRule getArrowExprRule() {
		return getArrowExprAccess().getRule();
	}

	//ImpliesExpr returns Expr:
	//	OrExpr => ({BinaryExpr.left=current} op="=>" right=ImpliesExpr)?;
	public ImpliesExprElements getImpliesExprAccess() {
		return (pImpliesExpr != null) ? pImpliesExpr : (pImpliesExpr = new ImpliesExprElements());
	}
	
	public ParserRule getImpliesExprRule() {
		return getImpliesExprAccess().getRule();
	}

	//OrExpr returns Expr:
	//	AndExpr => ({BinaryExpr.left=current} op=("or" | "xor") right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return (pOrExpr != null) ? pOrExpr : (pOrExpr = new OrExprElements());
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr returns Expr:
	//	RelationalExpr => ({BinaryExpr.left=current} op="and" right=RelationalExpr)*;
	public AndExprElements getAndExprAccess() {
		return (pAndExpr != null) ? pAndExpr : (pAndExpr = new AndExprElements());
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//RelationalExpr returns Expr:
	//	PlusExpr => ({BinaryExpr.left=current} op=("<" | "<=" | ">" | ">=" | "=" | "<>") right=PlusExpr)?;
	public RelationalExprElements getRelationalExprAccess() {
		return (pRelationalExpr != null) ? pRelationalExpr : (pRelationalExpr = new RelationalExprElements());
	}
	
	public ParserRule getRelationalExprRule() {
		return getRelationalExprAccess().getRule();
	}

	//PlusExpr returns Expr:
	//	TimesExpr => ({BinaryExpr.left=current} op=("+" | "-") right=TimesExpr)*;
	public PlusExprElements getPlusExprAccess() {
		return (pPlusExpr != null) ? pPlusExpr : (pPlusExpr = new PlusExprElements());
	}
	
	public ParserRule getPlusExprRule() {
		return getPlusExprAccess().getRule();
	}

	//TimesExpr returns Expr:
	//	PrefixExpr => ({BinaryExpr.left=current} op=("*" | "/" | "div") right=PrefixExpr)*;
	public TimesExprElements getTimesExprAccess() {
		return (pTimesExpr != null) ? pTimesExpr : (pTimesExpr = new TimesExprElements());
	}
	
	public ParserRule getTimesExprRule() {
		return getTimesExprAccess().getRule();
	}

	//PrefixExpr returns Expr:
	//	{UnaryExpr} op=("-" | "not" | "pre") expr=PrefixExpr | AtomicExpr;
	public PrefixExprElements getPrefixExprAccess() {
		return (pPrefixExpr != null) ? pPrefixExpr : (pPrefixExpr = new PrefixExprElements());
	}
	
	public ParserRule getPrefixExprRule() {
		return getPrefixExprAccess().getRule();
	}

	//AtomicExpr returns Expr:
	//	{IdExpr} id=[IdRef] | {IntExpr} val=INT | {RealExpr} val=REAL | {BoolExpr} val=BOOL | {IfThenElseExpr} "if" cond=Expr
	//	"then" then=Expr "else" else=Expr | {NodeCallExpr} node=[Node] "(" (args+=Expr ("," args+=Expr)*)? ")" | {RecordExpr}
	//	id=[Typedef] "{" fields+=ID "=" exprs+=Expr (";" fields+=ID "=" exprs+=Expr)* "}" | "(" Expr ")";
	public AtomicExprElements getAtomicExprAccess() {
		return (pAtomicExpr != null) ? pAtomicExpr : (pAtomicExpr = new AtomicExprElements());
	}
	
	public ParserRule getAtomicExprRule() {
		return getAtomicExprAccess().getRule();
	}

	//REAL:
	//	INT "." INT;
	public REALElements getREALAccess() {
		return (pREAL != null) ? pREAL : (pREAL = new REALElements());
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"--" (!("%" | "\r" | "\n") !("\r" | "\n")*)? ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
