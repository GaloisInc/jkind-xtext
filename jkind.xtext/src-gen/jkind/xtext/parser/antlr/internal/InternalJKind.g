/*
* generated by Xtext
*/
grammar InternalJKind;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package jkind.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package jkind.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import jkind.xtext.services.JKindGrammarAccess;

}

@parser::members {

 	private JKindGrammarAccess grammarAccess;
 	
    public InternalJKindParser(TokenStream input, JKindGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "File";	
   	}
   	
   	@Override
   	protected JKindGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	 iv_ruleFile=ruleFile 
	 { $current=$iv_ruleFile.current; } 
	 EOF 
;

// Rule File
ruleFile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFileAccess().getTypedefsTypedefParserRuleCall_0_0()); 
	    }
		lv_typedefs_0_0=ruleTypedef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFileRule());
	        }
       		add(
       			$current, 
       			"typedefs",
        		lv_typedefs_0_0, 
        		"Typedef");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFileAccess().getConstantsConstantParserRuleCall_1_0()); 
	    }
		lv_constants_1_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFileRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_1_0, 
        		"Constant");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFileAccess().getNodesNodeParserRuleCall_2_0()); 
	    }
		lv_nodes_2_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFileRule());
	        }
       		add(
       			$current, 
       			"nodes",
        		lv_nodes_2_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
))*
;





// Entry rule entryRuleTypedef
entryRuleTypedef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedefRule()); }
	 iv_ruleTypedef=ruleTypedef 
	 { $current=$iv_ruleTypedef.current; } 
	 EOF 
;

// Rule Typedef
ruleTypedef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypedefAccess().getAbbreviationTypeAction_0_0(),
            $current);
    }
)	otherlv_1='type' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypedefAccess().getTypeKeyword_0_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getTypedefAccess().getNameIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypedefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypedefAccess().getEqualsSignKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedefAccess().getTypeTypeParserRuleCall_0_4_0()); 
	    }
		lv_type_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypedefAccess().getSemicolonKeyword_0_5());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypedefAccess().getRecordTypeAction_1_0(),
            $current);
    }
)	otherlv_7='type' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypedefAccess().getTypeKeyword_1_1());
    }
(
(
		lv_name_8_0=RULE_ID
		{
			newLeafNode(lv_name_8_0, grammarAccess.getTypedefAccess().getNameIDTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypedefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_8_0, 
        		"ID");
	    }

)
)	otherlv_9='=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTypedefAccess().getEqualsSignKeyword_1_3());
    }
	otherlv_10='struct' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTypedefAccess().getStructKeyword_1_4());
    }
	otherlv_11='{' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTypedefAccess().getLeftCurlyBracketKeyword_1_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedefAccess().getFieldsFieldParserRuleCall_1_6_0()); 
	    }
		lv_fields_12_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedefRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_12_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTypedefAccess().getColonKeyword_1_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedefAccess().getTypesTypeParserRuleCall_1_8_0()); 
	    }
		lv_types_14_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedefRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_14_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15=';' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTypedefAccess().getSemicolonKeyword_1_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedefAccess().getFieldsFieldParserRuleCall_1_9_1_0()); 
	    }
		lv_fields_16_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedefRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_16_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17=':' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getTypedefAccess().getColonKeyword_1_9_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedefAccess().getTypesTypeParserRuleCall_1_9_3_0()); 
	    }
		lv_types_18_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedefRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_18_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_19='}' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getTypedefAccess().getRightCurlyBracketKeyword_1_10());
    }
	otherlv_20=';' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getTypedefAccess().getSemicolonKeyword_1_11());
    }
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getIntTypeAction_0_0(),
            $current);
    }
)	otherlv_1='int' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getIntKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getBoolTypeAction_1_0(),
            $current);
    }
)	otherlv_3='bool' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getBoolKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getRealTypeAction_2_0(),
            $current);
    }
)	otherlv_5='real' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getRealKeyword_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getSubrangeTypeAction_3_0(),
            $current);
    }
)	otherlv_7='subrange' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getSubrangeKeyword_3_1());
    }
	otherlv_8='[' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getLowBoundParserRuleCall_3_3_0()); 
	    }
		lv_low_9_0=ruleBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"low",
        		lv_low_9_0, 
        		"Bound");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTypeAccess().getCommaKeyword_3_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getHighBoundParserRuleCall_3_5_0()); 
	    }
		lv_high_11_0=ruleBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"high",
        		lv_high_11_0, 
        		"Bound");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12=']' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_3_6());
    }
	otherlv_13='of' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTypeAccess().getOfKeyword_3_7());
    }
	otherlv_14='int' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTypeAccess().getIntKeyword_3_8());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getUserTypeAction_4_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
        }
	otherlv_16=RULE_ID
	{
		newLeafNode(otherlv_16, grammarAccess.getTypeAccess().getDefTypedefCrossReference_4_1_0()); 
	}

)
)))
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleBound
entryRuleBound returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoundRule()); } 
	 iv_ruleBound=ruleBound 
	 { $current=$iv_ruleBound.current.getText(); }  
	 EOF 
;

// Rule Bound
ruleBound returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoundAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getBoundAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='const' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantAccess().getConstKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getTypeTypeParserRuleCall_2_1_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getExprExprParserRuleCall_4_0()); 
	    }
		lv_expr_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConstantAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	 iv_ruleNode=ruleNode 
	 { $current=$iv_ruleNode.current; } 
	 EOF 
;

// Rule Node
ruleNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='node' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeAccess().getNodeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNodeAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getInputsVariableGroupParserRuleCall_3_0_0()); 
	    }
		lv_inputs_3_0=ruleVariableGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_3_0, 
        		"VariableGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNodeAccess().getSemicolonKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getInputsVariableGroupParserRuleCall_3_1_1_0()); 
	    }
		lv_inputs_5_0=ruleVariableGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_5_0, 
        		"VariableGroup");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNodeAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7='returns' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNodeAccess().getReturnsKeyword_5());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getNodeAccess().getLeftParenthesisKeyword_6());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getOutputsVariableGroupParserRuleCall_7_0_0()); 
	    }
		lv_outputs_9_0=ruleVariableGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"outputs",
        		lv_outputs_9_0, 
        		"VariableGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getNodeAccess().getSemicolonKeyword_7_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getOutputsVariableGroupParserRuleCall_7_1_1_0()); 
	    }
		lv_outputs_11_0=ruleVariableGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"outputs",
        		lv_outputs_11_0, 
        		"VariableGroup");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getNodeAccess().getRightParenthesisKeyword_8());
    }
	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getNodeAccess().getSemicolonKeyword_9());
    }
(	otherlv_14='var' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getNodeAccess().getVarKeyword_10_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getLocalsVariableGroupParserRuleCall_10_1_0_0()); 
	    }
		lv_locals_15_0=ruleVariableGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"locals",
        		lv_locals_15_0, 
        		"VariableGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_16=';' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getNodeAccess().getSemicolonKeyword_10_1_1());
    }
)*)?	otherlv_17='let' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getNodeAccess().getLetKeyword_11());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getEquationsEquationParserRuleCall_12_0_0()); 
	    }
		lv_equations_18_0=ruleEquation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"equations",
        		lv_equations_18_0, 
        		"Equation");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getAssertionsAssertionParserRuleCall_12_1_0()); 
	    }
		lv_assertions_19_0=ruleAssertion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"assertions",
        		lv_assertions_19_0, 
        		"Assertion");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getPropertiesPropertyParserRuleCall_12_2_0()); 
	    }
		lv_properties_20_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_20_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getMainMainParserRuleCall_12_3_0()); 
	    }
		lv_main_21_0=ruleMain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"main",
        		lv_main_21_0, 
        		"Main");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_22='tel' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getNodeAccess().getTelKeyword_13());
    }
(	otherlv_23=';' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getNodeAccess().getSemicolonKeyword_14());
    }
)?)
;





// Entry rule entryRuleVariableGroup
entryRuleVariableGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableGroupRule()); }
	 iv_ruleVariableGroup=ruleVariableGroup 
	 { $current=$iv_ruleVariableGroup.current; } 
	 EOF 
;

// Rule VariableGroup
ruleVariableGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableGroupAccess().getVariablesVariableParserRuleCall_0_0()); 
	    }
		lv_variables_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableGroupRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableGroupAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableGroupAccess().getVariablesVariableParserRuleCall_1_1_0()); 
	    }
		lv_variables_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableGroupRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableGroupAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableGroupAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableGroupRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleEquation
entryRuleEquation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEquationRule()); }
	 iv_ruleEquation=ruleEquation 
	 { $current=$iv_ruleEquation.current; } 
	 EOF 
;

// Rule Equation
ruleEquation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEquationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEquationAccess().getLhsVariableCrossReference_0_0()); 
	}

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEquationAccess().getCommaKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEquationRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getEquationAccess().getLhsVariableCrossReference_1_1_0()); 
	}

)
))*	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEquationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEquationAccess().getRhsExprParserRuleCall_3_0()); 
	    }
		lv_rhs_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquationRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEquationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='--%PROPERTY' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropertyAccess().getPROPERTYKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getPropertyAccess().getRefVariableCrossReference_1_0()); 
	}

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleMain
entryRuleMain returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainRule()); } 
	 iv_ruleMain=ruleMain 
	 { $current=$iv_ruleMain.current.getText(); }  
	 EOF 
;

// Rule Main
ruleMain returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='--%MAIN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMainAccess().getMAINKeyword_0()); 
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMainAccess().getSemicolonKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleAssertion
entryRuleAssertion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssertionRule()); }
	 iv_ruleAssertion=ruleAssertion 
	 { $current=$iv_ruleAssertion.current; } 
	 EOF 
;

// Rule Assertion
ruleAssertion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assert' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssertionAccess().getAssertKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionAccess().getExprExprParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssertionAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExprAccess().getArrowExprParserRuleCall()); 
    }
    this_ArrowExpr_0=ruleArrowExpr
    { 
        $current = $this_ArrowExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleArrowExpr
entryRuleArrowExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrowExprRule()); }
	 iv_ruleArrowExpr=ruleArrowExpr 
	 { $current=$iv_ruleArrowExpr.current; } 
	 EOF 
;

// Rule ArrowExpr
ruleArrowExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getArrowExprAccess().getImpliesExprParserRuleCall_0()); 
    }
    this_ImpliesExpr_0=ruleImpliesExpr
    { 
        $current = $this_ImpliesExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
	'->' 
 

)
)(
(
ruleArrowExpr
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getArrowExprAccess().getBinaryExprLeftAction_1_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'->' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getArrowExprAccess().getOpHyphenMinusGreaterThanSignKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrowExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "->");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowExprAccess().getRightArrowExprParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=ruleArrowExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ArrowExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleImpliesExpr
entryRuleImpliesExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImpliesExprRule()); }
	 iv_ruleImpliesExpr=ruleImpliesExpr 
	 { $current=$iv_ruleImpliesExpr.current; } 
	 EOF 
;

// Rule ImpliesExpr
ruleImpliesExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImpliesExprAccess().getOrExprParserRuleCall_0()); 
    }
    this_OrExpr_0=ruleOrExpr
    { 
        $current = $this_OrExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
	'=>' 
 

)
)(
(
ruleImpliesExpr
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpliesExprAccess().getBinaryExprLeftAction_1_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'=>' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getImpliesExprAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImpliesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "=>");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExprAccess().getRightImpliesExprParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=ruleImpliesExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ImpliesExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	 iv_ruleOrExpr=ruleOrExpr 
	 { $current=$iv_ruleOrExpr.current; } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExprAccess().getAndExprParserRuleCall_0()); 
    }
    this_AndExpr_0=ruleAndExpr
    { 
        $current = $this_AndExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
(
	'or' 
 

    |			'xor' 
 

)

)
)(
(
ruleAndExpr
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExprAccess().getBinaryExprLeftAction_1_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'or' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getOrExprAccess().getOpOrKeyword_1_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'xor' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getOrExprAccess().getOpXorKeyword_1_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getRightAndExprParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleAndExpr
entryRuleAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExprRule()); }
	 iv_ruleAndExpr=ruleAndExpr 
	 { $current=$iv_ruleAndExpr.current; } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExprAccess().getRelationalExprParserRuleCall_0()); 
    }
    this_RelationalExpr_0=ruleRelationalExpr
    { 
        $current = $this_RelationalExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
	'and' 
 

)
)(
(
ruleRelationalExpr
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExprAccess().getBinaryExprLeftAction_1_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'and' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getAndExprAccess().getOpAndKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "and");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getRightRelationalExprParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=ruleRelationalExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"RelationalExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleRelationalExpr
entryRuleRelationalExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExprRule()); }
	 iv_ruleRelationalExpr=ruleRelationalExpr 
	 { $current=$iv_ruleRelationalExpr.current; } 
	 EOF 
;

// Rule RelationalExpr
ruleRelationalExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExprAccess().getPlusExprParserRuleCall_0()); 
    }
    this_PlusExpr_0=rulePlusExpr
    { 
        $current = $this_PlusExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
(
	'<' 
 

    |			'<=' 
 

    |			'>' 
 

    |			'>=' 
 

    |			'=' 
 

    |			'<>' 
 

)

)
)(
(
rulePlusExpr
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExprAccess().getBinaryExprLeftAction_1_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'<' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getRelationalExprAccess().getOpLessThanSignKeyword_1_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'<=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getRelationalExprAccess().getOpLessThanSignEqualsSignKeyword_1_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'>' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getRelationalExprAccess().getOpGreaterThanSignKeyword_1_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'>=' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getRelationalExprAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

    |		lv_op_2_5=	'=' 
    {
        newLeafNode(lv_op_2_5, grammarAccess.getRelationalExprAccess().getOpEqualsSignKeyword_1_0_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_5, null);
	    }

    |		lv_op_2_6=	'<>' 
    {
        newLeafNode(lv_op_2_6, grammarAccess.getRelationalExprAccess().getOpLessThanSignGreaterThanSignKeyword_1_0_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_6, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExprAccess().getRightPlusExprParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=rulePlusExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PlusExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRulePlusExpr
entryRulePlusExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlusExprRule()); }
	 iv_rulePlusExpr=rulePlusExpr 
	 { $current=$iv_rulePlusExpr.current; } 
	 EOF 
;

// Rule PlusExpr
rulePlusExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPlusExprAccess().getTimesExprParserRuleCall_0()); 
    }
    this_TimesExpr_0=ruleTimesExpr
    { 
        $current = $this_TimesExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
(
	'+' 
 

    |			'-' 
 

)

)
)(
(
ruleTimesExpr
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPlusExprAccess().getBinaryExprLeftAction_1_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getPlusExprAccess().getOpPlusSignKeyword_1_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'-' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getPlusExprAccess().getOpHyphenMinusKeyword_1_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusExprAccess().getRightTimesExprParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=ruleTimesExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"TimesExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleTimesExpr
entryRuleTimesExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimesExprRule()); }
	 iv_ruleTimesExpr=ruleTimesExpr 
	 { $current=$iv_ruleTimesExpr.current; } 
	 EOF 
;

// Rule TimesExpr
ruleTimesExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTimesExprAccess().getPrefixExprParserRuleCall_0()); 
    }
    this_PrefixExpr_0=rulePrefixExpr
    { 
        $current = $this_PrefixExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
(
	'*' 
 

    |			'/' 
 

    |			'div' 
 

)

)
)(
(
rulePrefixExpr
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTimesExprAccess().getBinaryExprLeftAction_1_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getTimesExprAccess().getOpAsteriskKeyword_1_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getTimesExprAccess().getOpSolidusKeyword_1_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'div' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getTimesExprAccess().getOpDivKeyword_1_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTimesExprAccess().getRightPrefixExprParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=rulePrefixExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimesExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PrefixExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRulePrefixExpr
entryRulePrefixExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixExprRule()); }
	 iv_rulePrefixExpr=rulePrefixExpr 
	 { $current=$iv_rulePrefixExpr.current; } 
	 EOF 
;

// Rule PrefixExpr
rulePrefixExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrefixExprAccess().getUnaryExprAction_0_0(),
            $current);
    }
)(
(
(
		lv_op_1_1=	'-' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getPrefixExprAccess().getOpHyphenMinusKeyword_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'not' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getPrefixExprAccess().getOpNotKeyword_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

    |		lv_op_1_3=	'pre' 
    {
        newLeafNode(lv_op_1_3, grammarAccess.getPrefixExprAccess().getOpPreKeyword_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixExprAccess().getExprPrefixExprParserRuleCall_0_2_0()); 
	    }
		lv_expr_2_0=rulePrefixExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"PrefixExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPrefixExprAccess().getProjectionExprParserRuleCall_1()); 
    }
    this_ProjectionExpr_3=ruleProjectionExpr
    { 
        $current = $this_ProjectionExpr_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleProjectionExpr
entryRuleProjectionExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProjectionExprRule()); }
	 iv_ruleProjectionExpr=ruleProjectionExpr 
	 { $current=$iv_ruleProjectionExpr.current; } 
	 EOF 
;

// Rule ProjectionExpr
ruleProjectionExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProjectionExprAccess().getAtomicExprParserRuleCall_0()); 
    }
    this_AtomicExpr_0=ruleAtomicExpr
    { 
        $current = $this_AtomicExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)	'.' 
(
(
	RULE_ID

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getProjectionExprAccess().getProjectionExprExprAction_1_0_0(),
            $current);
    }
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProjectionExprAccess().getFullStopKeyword_1_0_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProjectionExprRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getProjectionExprAccess().getFieldFieldCrossReference_1_0_2_0()); 
	}

)
)))*)
;





// Entry rule entryRuleAtomicExpr
entryRuleAtomicExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicExprRule()); }
	 iv_ruleAtomicExpr=ruleAtomicExpr 
	 { $current=$iv_ruleAtomicExpr.current; } 
	 EOF 
;

// Rule AtomicExpr
ruleAtomicExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getIdExprAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getAtomicExprAccess().getIdIdRefCrossReference_0_1_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getIntExprAction_1_0(),
            $current);
    }
)(
(
		lv_val_3_0=RULE_INT
		{
			newLeafNode(lv_val_3_0, grammarAccess.getAtomicExprAccess().getValINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_3_0, 
        		"INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getRealExprAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getValREALParserRuleCall_2_1_0()); 
	    }
		lv_val_5_0=ruleREAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_5_0, 
        		"REAL");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getBoolExprAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getValBOOLParserRuleCall_3_1_0()); 
	    }
		lv_val_7_0=ruleBOOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_7_0, 
        		"BOOL");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getIfThenElseExprAction_4_0(),
            $current);
    }
)	otherlv_9='if' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAtomicExprAccess().getIfKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getCondExprParserRuleCall_4_2_0()); 
	    }
		lv_cond_10_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_10_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='then' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAtomicExprAccess().getThenKeyword_4_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getThenExprParserRuleCall_4_4_0()); 
	    }
		lv_then_12_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_12_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13='else' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getAtomicExprAccess().getElseKeyword_4_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getElseExprParserRuleCall_4_6_0()); 
	    }
		lv_else_14_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_14_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getNodeCallExprAction_5_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_16=RULE_ID
	{
		newLeafNode(otherlv_16, grammarAccess.getAtomicExprAccess().getNodeNodeCrossReference_5_1_0()); 
	}

)
)	otherlv_17='(' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_5_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_5_3_0_0()); 
	    }
		lv_args_18_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_18_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_19=',' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getAtomicExprAccess().getCommaKeyword_5_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_5_3_1_1_0()); 
	    }
		lv_args_20_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_20_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_21=')' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_5_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getRecordExprAction_6_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_23=RULE_ID
	{
		newLeafNode(otherlv_23, grammarAccess.getAtomicExprAccess().getTypeRecordTypeCrossReference_6_1_0()); 
	}

)
)	otherlv_24='{' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getAtomicExprAccess().getLeftCurlyBracketKeyword_6_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_25=RULE_ID
	{
		newLeafNode(otherlv_25, grammarAccess.getAtomicExprAccess().getFieldsFieldCrossReference_6_3_0()); 
	}

)
)	otherlv_26='=' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getAtomicExprAccess().getEqualsSignKeyword_6_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprsExprParserRuleCall_6_5_0()); 
	    }
		lv_exprs_27_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_27_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_28=';' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getAtomicExprAccess().getSemicolonKeyword_6_6_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_29=RULE_ID
	{
		newLeafNode(otherlv_29, grammarAccess.getAtomicExprAccess().getFieldsFieldCrossReference_6_6_1_0()); 
	}

)
)	otherlv_30='=' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getAtomicExprAccess().getEqualsSignKeyword_6_6_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprsExprParserRuleCall_6_6_3_0()); 
	    }
		lv_exprs_31_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_31_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_32='}' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getAtomicExprAccess().getRightCurlyBracketKeyword_6_7());
    }
)
    |(	otherlv_33='(' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_7_0());
    }

    { 
        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprParserRuleCall_7_1()); 
    }
    this_Expr_34=ruleExpr
    { 
        $current = $this_Expr_34.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_35=')' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_7_2());
    }
))
;







// Entry rule entryRuleREAL
entryRuleREAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getREALRule()); } 
	 iv_ruleREAL=ruleREAL 
	 { $current=$iv_ruleREAL.current.getText(); }  
	 EOF 
;

// Rule REAL
ruleREAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getREALAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleBOOL
entryRuleBOOL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLRule()); } 
	 iv_ruleBOOL=ruleBOOL 
	 { $current=$iv_ruleBOOL.current.getText(); }  
	 EOF 
;

// Rule BOOL
ruleBOOL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLAccess().getFalseKeyword_1()); 
    }
)
    ;





RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_SL_COMMENT : '--' (~(('%'|'\r'|'\n')) ~(('\r'|'\n'))*)? ('\r'? '\n')?;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_ANY_OTHER : .;


