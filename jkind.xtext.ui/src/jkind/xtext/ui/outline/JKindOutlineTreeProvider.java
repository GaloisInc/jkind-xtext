/*
 * generated by Xtext
 */
package jkind.xtext.ui.outline;

import java.util.List;

import jkind.xtext.jkind.Assertion;
import jkind.xtext.jkind.Constant;
import jkind.xtext.jkind.Equation;
import jkind.xtext.jkind.File;
import jkind.xtext.jkind.Node;
import jkind.xtext.jkind.TypeDef;
import jkind.xtext.util.Util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;

public class JKindOutlineTreeProvider extends DefaultOutlineTreeProvider {
	protected void _createChildren(IOutlineNode parent, File file) {
		createIfNonempty(parent, "Types", file.getTypedefs());
		createIfNonempty(parent, "Constants", file.getConstants());
		createIfNonempty(parent, "Nodes", file.getNodes());
	}

	protected void _createChildren(IOutlineNode parent, Node node) {
		createIfNonempty(parent, "Inputs", Util.getVariables(node.getInputs()));
		createIfNonempty(parent, "Outputs", Util.getVariables(node.getOutputs()));
		createIfNonempty(parent, "Locals", Util.getVariables(node.getLocals()));
		createIfNonempty(parent, "Equations", node.getEquations());
		createIfNonempty(parent, "Assertions", node.getAssertions());
		createIfNonempty(parent, "Properties", node.getProperties());
	}
	
	@SuppressWarnings("unused")
	protected boolean _isLeaf(Assertion e) {
		return true;
	}

	@SuppressWarnings("unused")
	protected void _createChildren(IOutlineNode parent, Assertion e) {
	}
	
	@SuppressWarnings("unused")
	protected void _createChildren(IOutlineNode parent, TypeDef e) {
	}

	@SuppressWarnings("unused")
	protected boolean _isLeaf(TypeDef e) {
		return true;
	}

	@SuppressWarnings("unused")
	protected void _createChildren(IOutlineNode parent, Constant e) {
	}

	@SuppressWarnings("unused")
	protected boolean _isLeaf(Constant e) {
		return true;
	}

	@SuppressWarnings("unused")
	protected void _createChildren(IOutlineNode parent, Equation e) {
	}

	@SuppressWarnings("unused")
	protected boolean _isLeaf(Equation e) {
		return true;
	}

	private void createIfNonempty(IOutlineNode parent, String text, List<? extends EObject> list) {
		if (!list.isEmpty()) {
			createNodes(createVirtualNode(parent, text), list);
		}
	}

	private void createNodes(IOutlineNode parent, List<? extends EObject> list) {
		for (EObject e : list) {
			createNode(parent, e);
		}
	}

	protected Image defaultImage;

	protected IOutlineNode createVirtualNode(IOutlineNode parent, Object text) {
		if (defaultImage == null) {
			defaultImage = imageDispatcher.invoke(new Object());
		}
		return new VirtualOutlineNode(parent, defaultImage, text, false);
	}

	protected class VirtualOutlineNode extends AbstractOutlineNode {
		protected VirtualOutlineNode(IOutlineNode parent, Image image, Object text, boolean isLeaf) {
			super(parent, image, text, isLeaf);
		}
	}
}
