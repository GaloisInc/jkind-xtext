/*
* generated by Xtext
*/
package jkind.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import jkind.xtext.services.JKindGrammarAccess;

public class JKindParser extends AbstractContentAssistParser {
	
	@Inject
	private JKindGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected jkind.xtext.ui.contentassist.antlr.internal.InternalJKindParser createParser() {
		jkind.xtext.ui.contentassist.antlr.internal.InternalJKindParser result = new jkind.xtext.ui.contentassist.antlr.internal.InternalJKindParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFileAccess().getAlternatives(), "rule__File__Alternatives");
					put(grammarAccess.getTypedefAccess().getAlternatives(), "rule__Typedef__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getNodeAccess().getAlternatives_12(), "rule__Node__Alternatives_12");
					put(grammarAccess.getOrExprAccess().getOpAlternatives_1_0_0_1_0(), "rule__OrExpr__OpAlternatives_1_0_0_1_0");
					put(grammarAccess.getRelationalExprAccess().getOpAlternatives_1_0_0_1_0(), "rule__RelationalExpr__OpAlternatives_1_0_0_1_0");
					put(grammarAccess.getPlusExprAccess().getOpAlternatives_1_0_0_1_0(), "rule__PlusExpr__OpAlternatives_1_0_0_1_0");
					put(grammarAccess.getTimesExprAccess().getOpAlternatives_1_0_0_1_0(), "rule__TimesExpr__OpAlternatives_1_0_0_1_0");
					put(grammarAccess.getPrefixExprAccess().getAlternatives(), "rule__PrefixExpr__Alternatives");
					put(grammarAccess.getPrefixExprAccess().getOpAlternatives_0_1_0(), "rule__PrefixExpr__OpAlternatives_0_1_0");
					put(grammarAccess.getAtomicExprAccess().getAlternatives(), "rule__AtomicExpr__Alternatives");
					put(grammarAccess.getIdRefAccess().getAlternatives(), "rule__IdRef__Alternatives");
					put(grammarAccess.getBOOLAccess().getAlternatives(), "rule__BOOL__Alternatives");
					put(grammarAccess.getTypedefAccess().getGroup_0(), "rule__Typedef__Group_0__0");
					put(grammarAccess.getTypedefAccess().getGroup_1(), "rule__Typedef__Group_1__0");
					put(grammarAccess.getTypedefAccess().getGroup_1_9(), "rule__Typedef__Group_1_9__0");
					put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
					put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
					put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
					put(grammarAccess.getTypeAccess().getGroup_3(), "rule__Type__Group_3__0");
					put(grammarAccess.getTypeAccess().getGroup_4(), "rule__Type__Group_4__0");
					put(grammarAccess.getBoundAccess().getGroup(), "rule__Bound__Group__0");
					put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
					put(grammarAccess.getConstantAccess().getGroup_2(), "rule__Constant__Group_2__0");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getNodeAccess().getGroup_3(), "rule__Node__Group_3__0");
					put(grammarAccess.getNodeAccess().getGroup_3_1(), "rule__Node__Group_3_1__0");
					put(grammarAccess.getNodeAccess().getGroup_7(), "rule__Node__Group_7__0");
					put(grammarAccess.getNodeAccess().getGroup_7_1(), "rule__Node__Group_7_1__0");
					put(grammarAccess.getNodeAccess().getGroup_10(), "rule__Node__Group_10__0");
					put(grammarAccess.getNodeAccess().getGroup_10_1(), "rule__Node__Group_10_1__0");
					put(grammarAccess.getVariableGroupAccess().getGroup(), "rule__VariableGroup__Group__0");
					put(grammarAccess.getVariableGroupAccess().getGroup_1(), "rule__VariableGroup__Group_1__0");
					put(grammarAccess.getEquationAccess().getGroup(), "rule__Equation__Group__0");
					put(grammarAccess.getEquationAccess().getGroup_1(), "rule__Equation__Group_1__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getMainAccess().getGroup(), "rule__Main__Group__0");
					put(grammarAccess.getAssertionAccess().getGroup(), "rule__Assertion__Group__0");
					put(grammarAccess.getArrowExprAccess().getGroup(), "rule__ArrowExpr__Group__0");
					put(grammarAccess.getArrowExprAccess().getGroup_1(), "rule__ArrowExpr__Group_1__0");
					put(grammarAccess.getArrowExprAccess().getGroup_1_0(), "rule__ArrowExpr__Group_1_0__0");
					put(grammarAccess.getArrowExprAccess().getGroup_1_0_0(), "rule__ArrowExpr__Group_1_0_0__0");
					put(grammarAccess.getImpliesExprAccess().getGroup(), "rule__ImpliesExpr__Group__0");
					put(grammarAccess.getImpliesExprAccess().getGroup_1(), "rule__ImpliesExpr__Group_1__0");
					put(grammarAccess.getImpliesExprAccess().getGroup_1_0(), "rule__ImpliesExpr__Group_1_0__0");
					put(grammarAccess.getImpliesExprAccess().getGroup_1_0_0(), "rule__ImpliesExpr__Group_1_0_0__0");
					put(grammarAccess.getOrExprAccess().getGroup(), "rule__OrExpr__Group__0");
					put(grammarAccess.getOrExprAccess().getGroup_1(), "rule__OrExpr__Group_1__0");
					put(grammarAccess.getOrExprAccess().getGroup_1_0(), "rule__OrExpr__Group_1_0__0");
					put(grammarAccess.getOrExprAccess().getGroup_1_0_0(), "rule__OrExpr__Group_1_0_0__0");
					put(grammarAccess.getAndExprAccess().getGroup(), "rule__AndExpr__Group__0");
					put(grammarAccess.getAndExprAccess().getGroup_1(), "rule__AndExpr__Group_1__0");
					put(grammarAccess.getAndExprAccess().getGroup_1_0(), "rule__AndExpr__Group_1_0__0");
					put(grammarAccess.getAndExprAccess().getGroup_1_0_0(), "rule__AndExpr__Group_1_0_0__0");
					put(grammarAccess.getRelationalExprAccess().getGroup(), "rule__RelationalExpr__Group__0");
					put(grammarAccess.getRelationalExprAccess().getGroup_1(), "rule__RelationalExpr__Group_1__0");
					put(grammarAccess.getRelationalExprAccess().getGroup_1_0(), "rule__RelationalExpr__Group_1_0__0");
					put(grammarAccess.getRelationalExprAccess().getGroup_1_0_0(), "rule__RelationalExpr__Group_1_0_0__0");
					put(grammarAccess.getPlusExprAccess().getGroup(), "rule__PlusExpr__Group__0");
					put(grammarAccess.getPlusExprAccess().getGroup_1(), "rule__PlusExpr__Group_1__0");
					put(grammarAccess.getPlusExprAccess().getGroup_1_0(), "rule__PlusExpr__Group_1_0__0");
					put(grammarAccess.getPlusExprAccess().getGroup_1_0_0(), "rule__PlusExpr__Group_1_0_0__0");
					put(grammarAccess.getTimesExprAccess().getGroup(), "rule__TimesExpr__Group__0");
					put(grammarAccess.getTimesExprAccess().getGroup_1(), "rule__TimesExpr__Group_1__0");
					put(grammarAccess.getTimesExprAccess().getGroup_1_0(), "rule__TimesExpr__Group_1_0__0");
					put(grammarAccess.getTimesExprAccess().getGroup_1_0_0(), "rule__TimesExpr__Group_1_0_0__0");
					put(grammarAccess.getPrefixExprAccess().getGroup_0(), "rule__PrefixExpr__Group_0__0");
					put(grammarAccess.getProjectionExprAccess().getGroup(), "rule__ProjectionExpr__Group__0");
					put(grammarAccess.getProjectionExprAccess().getGroup_1(), "rule__ProjectionExpr__Group_1__0");
					put(grammarAccess.getProjectionExprAccess().getGroup_1_0(), "rule__ProjectionExpr__Group_1_0__0");
					put(grammarAccess.getProjectionExprAccess().getGroup_1_0_0(), "rule__ProjectionExpr__Group_1_0_0__0");
					put(grammarAccess.getAtomicExprAccess().getGroup_0(), "rule__AtomicExpr__Group_0__0");
					put(grammarAccess.getAtomicExprAccess().getGroup_1(), "rule__AtomicExpr__Group_1__0");
					put(grammarAccess.getAtomicExprAccess().getGroup_2(), "rule__AtomicExpr__Group_2__0");
					put(grammarAccess.getAtomicExprAccess().getGroup_3(), "rule__AtomicExpr__Group_3__0");
					put(grammarAccess.getAtomicExprAccess().getGroup_4(), "rule__AtomicExpr__Group_4__0");
					put(grammarAccess.getAtomicExprAccess().getGroup_6(), "rule__AtomicExpr__Group_6__0");
					put(grammarAccess.getAtomicExprAccess().getGroup_6_6(), "rule__AtomicExpr__Group_6_6__0");
					put(grammarAccess.getAtomicExprAccess().getGroup_7(), "rule__AtomicExpr__Group_7__0");
					put(grammarAccess.getAtomicExprAccess().getGroup_7_6(), "rule__AtomicExpr__Group_7_6__0");
					put(grammarAccess.getAtomicExprAccess().getGroup_8(), "rule__AtomicExpr__Group_8__0");
					put(grammarAccess.getNodeCallExprAccess().getGroup(), "rule__NodeCallExpr__Group__0");
					put(grammarAccess.getNodeCallExprAccess().getGroup_2(), "rule__NodeCallExpr__Group_2__0");
					put(grammarAccess.getNodeCallExprAccess().getGroup_2_1(), "rule__NodeCallExpr__Group_2_1__0");
					put(grammarAccess.getREALAccess().getGroup(), "rule__REAL__Group__0");
					put(grammarAccess.getFileAccess().getTypedefsAssignment_0(), "rule__File__TypedefsAssignment_0");
					put(grammarAccess.getFileAccess().getConstantsAssignment_1(), "rule__File__ConstantsAssignment_1");
					put(grammarAccess.getFileAccess().getNodesAssignment_2(), "rule__File__NodesAssignment_2");
					put(grammarAccess.getTypedefAccess().getNameAssignment_0_2(), "rule__Typedef__NameAssignment_0_2");
					put(grammarAccess.getTypedefAccess().getTypeAssignment_0_4(), "rule__Typedef__TypeAssignment_0_4");
					put(grammarAccess.getTypedefAccess().getNameAssignment_1_2(), "rule__Typedef__NameAssignment_1_2");
					put(grammarAccess.getTypedefAccess().getFieldsAssignment_1_6(), "rule__Typedef__FieldsAssignment_1_6");
					put(grammarAccess.getTypedefAccess().getTypesAssignment_1_8(), "rule__Typedef__TypesAssignment_1_8");
					put(grammarAccess.getTypedefAccess().getFieldsAssignment_1_9_1(), "rule__Typedef__FieldsAssignment_1_9_1");
					put(grammarAccess.getTypedefAccess().getTypesAssignment_1_9_3(), "rule__Typedef__TypesAssignment_1_9_3");
					put(grammarAccess.getTypeAccess().getLowAssignment_3_3(), "rule__Type__LowAssignment_3_3");
					put(grammarAccess.getTypeAccess().getHighAssignment_3_5(), "rule__Type__HighAssignment_3_5");
					put(grammarAccess.getTypeAccess().getDefAssignment_4_1(), "rule__Type__DefAssignment_4_1");
					put(grammarAccess.getFieldAccess().getNameAssignment(), "rule__Field__NameAssignment");
					put(grammarAccess.getConstantAccess().getNameAssignment_1(), "rule__Constant__NameAssignment_1");
					put(grammarAccess.getConstantAccess().getTypeAssignment_2_1(), "rule__Constant__TypeAssignment_2_1");
					put(grammarAccess.getConstantAccess().getExprAssignment_4(), "rule__Constant__ExprAssignment_4");
					put(grammarAccess.getNodeAccess().getNameAssignment_1(), "rule__Node__NameAssignment_1");
					put(grammarAccess.getNodeAccess().getInputsAssignment_3_0(), "rule__Node__InputsAssignment_3_0");
					put(grammarAccess.getNodeAccess().getInputsAssignment_3_1_1(), "rule__Node__InputsAssignment_3_1_1");
					put(grammarAccess.getNodeAccess().getOutputsAssignment_7_0(), "rule__Node__OutputsAssignment_7_0");
					put(grammarAccess.getNodeAccess().getOutputsAssignment_7_1_1(), "rule__Node__OutputsAssignment_7_1_1");
					put(grammarAccess.getNodeAccess().getLocalsAssignment_10_1_0(), "rule__Node__LocalsAssignment_10_1_0");
					put(grammarAccess.getNodeAccess().getEquationsAssignment_12_0(), "rule__Node__EquationsAssignment_12_0");
					put(grammarAccess.getNodeAccess().getAssertionsAssignment_12_1(), "rule__Node__AssertionsAssignment_12_1");
					put(grammarAccess.getNodeAccess().getPropertiesAssignment_12_2(), "rule__Node__PropertiesAssignment_12_2");
					put(grammarAccess.getNodeAccess().getMainAssignment_12_3(), "rule__Node__MainAssignment_12_3");
					put(grammarAccess.getVariableGroupAccess().getVariablesAssignment_0(), "rule__VariableGroup__VariablesAssignment_0");
					put(grammarAccess.getVariableGroupAccess().getVariablesAssignment_1_1(), "rule__VariableGroup__VariablesAssignment_1_1");
					put(grammarAccess.getVariableGroupAccess().getTypeAssignment_3(), "rule__VariableGroup__TypeAssignment_3");
					put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
					put(grammarAccess.getEquationAccess().getLhsAssignment_0(), "rule__Equation__LhsAssignment_0");
					put(grammarAccess.getEquationAccess().getLhsAssignment_1_1(), "rule__Equation__LhsAssignment_1_1");
					put(grammarAccess.getEquationAccess().getRhsAssignment_3(), "rule__Equation__RhsAssignment_3");
					put(grammarAccess.getPropertyAccess().getRefAssignment_1(), "rule__Property__RefAssignment_1");
					put(grammarAccess.getAssertionAccess().getExprAssignment_1(), "rule__Assertion__ExprAssignment_1");
					put(grammarAccess.getArrowExprAccess().getOpAssignment_1_0_0_1(), "rule__ArrowExpr__OpAssignment_1_0_0_1");
					put(grammarAccess.getArrowExprAccess().getRightAssignment_1_1(), "rule__ArrowExpr__RightAssignment_1_1");
					put(grammarAccess.getImpliesExprAccess().getOpAssignment_1_0_0_1(), "rule__ImpliesExpr__OpAssignment_1_0_0_1");
					put(grammarAccess.getImpliesExprAccess().getRightAssignment_1_1(), "rule__ImpliesExpr__RightAssignment_1_1");
					put(grammarAccess.getOrExprAccess().getOpAssignment_1_0_0_1(), "rule__OrExpr__OpAssignment_1_0_0_1");
					put(grammarAccess.getOrExprAccess().getRightAssignment_1_1(), "rule__OrExpr__RightAssignment_1_1");
					put(grammarAccess.getAndExprAccess().getOpAssignment_1_0_0_1(), "rule__AndExpr__OpAssignment_1_0_0_1");
					put(grammarAccess.getAndExprAccess().getRightAssignment_1_1(), "rule__AndExpr__RightAssignment_1_1");
					put(grammarAccess.getRelationalExprAccess().getOpAssignment_1_0_0_1(), "rule__RelationalExpr__OpAssignment_1_0_0_1");
					put(grammarAccess.getRelationalExprAccess().getRightAssignment_1_1(), "rule__RelationalExpr__RightAssignment_1_1");
					put(grammarAccess.getPlusExprAccess().getOpAssignment_1_0_0_1(), "rule__PlusExpr__OpAssignment_1_0_0_1");
					put(grammarAccess.getPlusExprAccess().getRightAssignment_1_1(), "rule__PlusExpr__RightAssignment_1_1");
					put(grammarAccess.getTimesExprAccess().getOpAssignment_1_0_0_1(), "rule__TimesExpr__OpAssignment_1_0_0_1");
					put(grammarAccess.getTimesExprAccess().getRightAssignment_1_1(), "rule__TimesExpr__RightAssignment_1_1");
					put(grammarAccess.getPrefixExprAccess().getOpAssignment_0_1(), "rule__PrefixExpr__OpAssignment_0_1");
					put(grammarAccess.getPrefixExprAccess().getExprAssignment_0_2(), "rule__PrefixExpr__ExprAssignment_0_2");
					put(grammarAccess.getProjectionExprAccess().getFieldAssignment_1_1(), "rule__ProjectionExpr__FieldAssignment_1_1");
					put(grammarAccess.getAtomicExprAccess().getIdAssignment_0_1(), "rule__AtomicExpr__IdAssignment_0_1");
					put(grammarAccess.getAtomicExprAccess().getValAssignment_1_1(), "rule__AtomicExpr__ValAssignment_1_1");
					put(grammarAccess.getAtomicExprAccess().getValAssignment_2_1(), "rule__AtomicExpr__ValAssignment_2_1");
					put(grammarAccess.getAtomicExprAccess().getValAssignment_3_1(), "rule__AtomicExpr__ValAssignment_3_1");
					put(grammarAccess.getAtomicExprAccess().getCondAssignment_4_2(), "rule__AtomicExpr__CondAssignment_4_2");
					put(grammarAccess.getAtomicExprAccess().getThenAssignment_4_4(), "rule__AtomicExpr__ThenAssignment_4_4");
					put(grammarAccess.getAtomicExprAccess().getElseAssignment_4_6(), "rule__AtomicExpr__ElseAssignment_4_6");
					put(grammarAccess.getAtomicExprAccess().getClockAssignment_6_3(), "rule__AtomicExpr__ClockAssignment_6_3");
					put(grammarAccess.getAtomicExprAccess().getCallAssignment_6_5(), "rule__AtomicExpr__CallAssignment_6_5");
					put(grammarAccess.getAtomicExprAccess().getArgsAssignment_6_6_1(), "rule__AtomicExpr__ArgsAssignment_6_6_1");
					put(grammarAccess.getAtomicExprAccess().getTypeAssignment_7_1(), "rule__AtomicExpr__TypeAssignment_7_1");
					put(grammarAccess.getAtomicExprAccess().getFieldsAssignment_7_3(), "rule__AtomicExpr__FieldsAssignment_7_3");
					put(grammarAccess.getAtomicExprAccess().getExprsAssignment_7_5(), "rule__AtomicExpr__ExprsAssignment_7_5");
					put(grammarAccess.getAtomicExprAccess().getFieldsAssignment_7_6_1(), "rule__AtomicExpr__FieldsAssignment_7_6_1");
					put(grammarAccess.getAtomicExprAccess().getExprsAssignment_7_6_3(), "rule__AtomicExpr__ExprsAssignment_7_6_3");
					put(grammarAccess.getNodeCallExprAccess().getNodeAssignment_0(), "rule__NodeCallExpr__NodeAssignment_0");
					put(grammarAccess.getNodeCallExprAccess().getArgsAssignment_2_0(), "rule__NodeCallExpr__ArgsAssignment_2_0");
					put(grammarAccess.getNodeCallExprAccess().getArgsAssignment_2_1_1(), "rule__NodeCallExpr__ArgsAssignment_2_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			jkind.xtext.ui.contentassist.antlr.internal.InternalJKindParser typedParser = (jkind.xtext.ui.contentassist.antlr.internal.InternalJKindParser) parser;
			typedParser.entryRuleFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT" };
	}
	
	public JKindGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(JKindGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
